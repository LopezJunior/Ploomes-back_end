var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.2,1,2.164]],["body/controllers/AppController.html",[0,1.772,1,3.195,2,1.352,3,0.302,4,0.302,5,0.262,6,3.117,7,0.525,8,1.646,9,4.086,10,3.708,11,4.838,12,1.573,13,0.029,14,3.708,15,4.861,16,4.086,17,3.195,18,4.086,19,0.683,20,3.708,21,1.166,22,1.007,23,0.575,24,0.866,25,5.422,26,1.166,27,0.533,28,0.741,29,2.89,30,2.205,31,1.255,32,2.942,33,3.117,34,3.117,35,3.708,36,0.302,37,0.096,38,1.702,39,1.457,40,2.205,41,3.708,42,1.846,43,3.117,44,3.708,45,3.708,46,1.352,47,3.708,48,0.021,49,0.021]],["title/modules/AppModule.html",[50,1.115,51,2.164]],["body/modules/AppModule.html",[1,3.384,2,1.654,3,0.272,4,0.272,5,0.236,13,0.029,27,0.573,28,0.668,32,3.229,33,2.811,36,0.272,37,0.086,48,0.019,49,0.019,50,1.536,51,4.335,52,1.418,53,1.924,54,2.811,55,2.811,56,2.811,57,3.54,58,3.54,59,2.525,60,3.54,61,3.54,62,2.259,63,1.665,64,1.665,65,3.344,66,2.462,67,2.698,68,3.344,69,3.344,70,3.344,71,3.344,72,3.344,73,3.344]],["title/injectables/AppService.html",[32,1.787,74,0.894]],["body/injectables/AppService.html",[3,0.338,4,0.338,5,0.293,7,0.587,8,1.768,9,4.389,13,0.029,16,4.389,19,0.764,21,1.304,22,1.125,23,0.643,24,0.968,26,1.304,27,0.384,28,0.828,32,2.833,36,0.338,37,0.107,43,4.389,46,1.511,48,0.022,49,0.022,74,1.417,75,1.902,76,3.485,77,5.222,78,1.807,79,4.146,80,5.222,81,4.146,82,4.146,83,3.485]],["title/controllers/AuthController.html",[0,1.2,84,2.164]],["body/controllers/AuthController.html",[0,1.715,2,1.286,3,0.287,4,0.287,5,0.249,7,0.5,8,1.592,12,1.497,13,0.029,19,0.65,21,1.11,22,0.958,23,0.547,24,0.824,26,1.11,27,0.544,28,0.705,29,2.797,30,2.098,31,1.194,36,0.287,37,0.091,38,1.619,39,1.386,40,2.098,46,1.286,48,0.02,49,0.02,84,3.091,85,2.966,86,4.151,87,2.966,88,3.595,89,3.528,90,3.091,91,2.797,92,4.703,93,4.703,94,3.091,95,3.46,96,2.342,97,4.703,98,3.528,99,3.954,100,2.596,101,2.966,102,2.966,103,2.319,104,2.87,105,2.966,106,2.098,107,2.966,108,2.966,109,2.966,110,2.966,111,3.528,112,3.528,113,3.528,114,3.528]],["title/modules/AuthModule.html",[50,1.115,57,1.958]],["body/modules/AuthModule.html",[2,1.704,3,0.285,4,0.285,5,0.247,13,0.029,27,0.57,28,0.698,36,0.285,37,0.09,48,0.02,49,0.02,50,1.582,52,1.482,53,1.982,57,3.806,59,2.557,62,2.327,63,1.74,64,1.74,66,2.535,67,2.779,84,3.461,104,3.271,105,2.937,115,2.937,116,3.494,117,2.937,118,3.585,119,3.494,120,3.494,121,2.297,122,3.494,123,2.571,124,2.297,125,1.482,126,3.494,127,2.297,128,2.297,129,1.603,130,3.494,131,3.494,132,2.937,133,3.494,134,3.494,135,3.494]],["title/injectables/AuthService.html",[74,0.894,104,1.787]],["body/injectables/AuthService.html",[3,0.25,4,0.25,5,0.217,7,0.435,8,1.449,13,0.029,19,0.788,21,1.346,22,1.161,23,0.664,24,0.999,26,0.966,27,0.537,28,0.614,36,0.25,37,0.079,39,1.681,42,2.452,46,1.12,48,0.018,49,0.018,74,1.161,75,1.409,86,3.148,87,3.597,88,3.449,95,2.259,99,3.597,104,2.321,106,1.826,107,2.582,108,2.582,109,2.582,123,2.259,136,2.582,137,2.672,138,2.544,139,1.826,140,2.093,141,5.95,142,3.071,143,2.321,144,3.071,145,2.582,146,2.018,147,2.812,148,3.597,149,2.672,150,2.928,151,1.15,152,2.321,153,2.018,154,3.148,155,2.812,156,4.279,157,4.279,158,4.279,159,4.279,160,3.071,161,3.148,162,1.529,163,3.071,164,2.582]],["title/classes/Card.html",[37,0.085,165,1.787]],["body/classes/Card.html",[3,0.308,4,0.308,5,0.268,7,0.536,13,0.028,19,1.136,23,0.957,24,1.487,27,0.35,36,0.308,37,0.098,48,0.021,49,0.021,78,1.44,151,1.279,165,2.673,166,1.38,167,3.182,168,1.796,169,3.6,170,2.513,171,5.477,172,3.6,173,5.477,174,4.604,175,4.267,176,3.786,177,3.786,178,3.147,179,3.786,180,3.786,181,3.786,182,3.786,183,1.606]],["title/controllers/CardController.html",[0,1.2,184,2.164]],["body/controllers/CardController.html",[0,1.262,2,1.262,3,0.282,4,0.282,5,0.245,7,0.49,8,1.572,12,1.468,13,0.029,19,0.638,21,1.089,22,0.939,23,0.537,24,0.808,26,1.089,27,0.557,28,0.692,29,2.761,30,2.058,31,1.172,36,0.282,37,0.089,38,1.588,39,1.36,40,2.058,46,1.693,48,0.02,49,0.02,90,3.052,91,2.761,96,2.312,103,3.052,125,1.468,151,1.404,165,1.878,184,3.052,185,2.909,186,2.909,187,2.131,188,2.275,189,3.461,190,4.643,191,3.461,192,3.461,193,2.546,194,2.546,195,3.416,196,2.058,197,2.058,198,2.546,199,2.546,200,2.404,201,2.909,202,3.461,203,2.546,204,3.461,205,2.909,206,2.909,207,3.461,208,3.461,209,3.461,210,3.461,211,3.461,212,3.461]],["title/modules/CardModule.html",[50,1.115,58,1.958]],["body/modules/CardModule.html",[2,1.817,3,0.314,4,0.314,5,0.272,13,0.029,27,0.56,28,0.77,36,0.314,37,0.1,48,0.021,49,0.021,50,1.687,52,1.634,53,2.114,58,3.799,59,2.627,62,2.481,63,1.918,64,1.918,66,2.703,67,2.963,121,2.532,124,2.532,125,1.634,127,2.532,128,2.532,129,1.768,184,3.63,200,2.842,201,3.239,213,3.239,214,3.239,215,3.852,216,3.852,217,3.852]],["title/injectables/CardService.html",[74,0.894,200,1.511]],["body/injectables/CardService.html",[3,0.198,4,0.198,5,0.172,7,0.344,8,1.223,13,0.029,19,0.795,21,1.357,22,1.297,23,0.669,24,1.008,26,1.136,27,0.496,28,0.485,36,0.198,37,0.063,38,1.114,39,0.954,42,2.543,46,1.317,48,0.015,49,0.015,74,0.981,75,1.114,78,1.261,137,2.904,138,1.444,139,1.444,140,1.877,143,2.34,146,1.596,151,1.404,152,2.771,153,2.374,170,2.793,174,3.037,183,1.03,187,1.979,188,2.374,199,1.786,200,1.658,218,2.041,219,3.037,220,2.428,221,2.428,222,2.374,223,3.612,224,2.428,225,2.657,226,1.786,227,2.041,228,1.444,229,1.786,230,3.612,231,2.428,232,4.293,233,4.5,234,2.148,235,2.657,236,4.5,237,3.612,238,4.016,239,2.657,240,2.428,241,2.428,242,2.428,243,2.428,244,2.428,245,2.041,246,2.428,247,2.428,248,2.428,249,2.428,250,2.428,251,2.428]],["title/classes/CreateRoomDto.html",[37,0.085,252,1.787]],["body/classes/CreateRoomDto.html",[3,0.188,4,0.188,5,0.164,7,0.328,12,2.23,13,0.028,19,0.969,23,0.816,24,0.814,27,0.323,31,0.784,36,0.188,37,0.09,48,0.015,49,0.015,96,3.063,166,0.844,168,1.271,178,3.269,205,2.93,235,3.084,252,1.891,253,4.587,254,1.703,255,3.524,256,3.084,257,3.524,258,3.524,259,3.524,260,2.315,261,3.485,262,3.485,263,5.615,264,2.93,265,3.485,266,4.72,267,3.485,268,3.485,269,3.485,270,4.42,271,3.485,272,3.96,273,3.868,274,2.315,275,2.315,276,5.258,277,3.485,278,3.485,279,4.42,280,2.315,281,2.315,282,3.485,283,3.485,284,2.93,285,2.315,286,2.315,287,2.93,288,2.564,289,2.564,290,3.485,291,2.315,292,2.315,293,2.93,294,2.564,295,3.485,296,3.485,297,3.485,298,2.315,299,2.315,300,3.485,301,3.485,302,3.485,303,2.564,304,2.93,305,2.315,306,3.586,307,3.485,308,5.457,309,2.315,310,2.315,311,1.521,312,4.192,313,2.315,314,3.127,315,2.315,316,2.315,317,2.315,318,2.315]],["title/classes/CreateUserDto.html",[37,0.085,319,1.787]],["body/classes/CreateUserDto.html",[3,0.238,4,0.238,5,0.207,7,0.414,12,2.21,13,0.028,19,0.96,22,1.301,23,0.809,27,0.383,31,0.989,36,0.238,37,0.107,48,0.018,49,0.018,78,1.752,149,2.983,150,2.851,166,1.066,168,1.507,266,3.474,272,3.857,306,3.614,311,1.921,314,2.851,319,2.242,320,4.622,321,2.15,322,4.794,323,2.923,324,4.381,325,2.923,326,2.923,327,4.199,328,3.474,329,2.923,330,4.133,331,2.923,332,4.133,333,4.133,334,2.923,335,2.923,336,4.133,337,4.133,338,4.133,339,5.211,340,4.133,341,2.923,342,4.133,343,4.133,344,4.133,345,4.133,346,4.133,347,4.133,348,4.133,349,4.133,350,2.923,351,3.474,352,4.622,353,4.381,354,2.923,355,2.457,356,2.923,357,2.923,358,2.923,359,2.923,360,2.923]],["title/injectables/JwtStrategy.html",[74,0.894,118,1.958]],["body/injectables/JwtStrategy.html",[3,0.272,4,0.272,5,0.236,7,0.474,8,1.536,13,0.029,19,0.836,21,1.427,22,1.231,23,0.857,24,1.06,26,1.052,27,0.511,28,0.668,36,0.272,37,0.086,38,1.535,39,1.314,42,1.665,46,1.219,48,0.019,49,0.019,74,1.231,75,1.535,78,0.977,118,2.698,125,1.418,129,1.535,132,2.811,137,2.794,138,1.989,139,1.989,140,2.17,143,2.462,145,3.814,146,2.198,149,2.462,151,1.29,152,1.814,153,2.198,154,2.46,155,2.198,161,2.46,162,1.665,222,2.198,361,2.811,362,4.537,363,3.344,364,4.537,365,4.537,366,3.344,367,3.344,368,3.344,369,3.344,370,3.344,371,2.811,372,2.198,373,3.344,374,3.344,375,3.344,376,3.344,377,3.344,378,2.811,379,3.344,380,3.344,381,3.344,382,3.344,383,3.344]],["title/classes/LoginDto.html",[37,0.085,88,1.958]],["body/classes/LoginDto.html",[3,0.307,4,0.307,5,0.267,7,0.534,12,2.085,13,0.028,19,0.905,23,0.763,27,0.455,31,1.277,36,0.307,37,0.127,48,0.021,49,0.021,78,1.693,88,2.923,149,3.259,150,3.572,166,1.375,168,1.792,272,3.808,306,3.594,311,2.48,314,2.923,324,4.132,328,4.132,351,4.132,352,4.596,353,4.596,384,3.171,385,3.772,386,5.793,387,4.915,388,3.772,389,3.772,390,4.915,391,3.772]],["title/classes/LoginResponseDto.html",[37,0.085,106,1.958]],["body/classes/LoginResponseDto.html",[3,0.315,4,0.315,5,0.273,7,0.547,12,2.118,13,0.028,19,0.92,23,0.775,27,0.462,31,1.309,36,0.315,37,0.1,48,0.021,49,0.021,78,1.46,86,3.674,95,4.07,106,2.97,129,2.292,151,1.448,166,1.409,168,1.821,183,1.64,272,3.283,306,3.636,314,2.97,327,3.674,392,4.651,393,3.25,394,4.994,395,4.994,396,3.674,397,4.994,398,3.866,399,3.674,400,4.198,401,3.866]],["title/modules/PrismaModule.html",[50,1.115,59,1.397]],["body/modules/PrismaModule.html",[3,0.341,4,0.341,5,0.296,13,0.028,27,0.487,28,0.838,36,0.341,37,0.108,48,0.022,49,0.022,50,1.781,52,1.779,53,2.231,59,2.726,62,2.619,63,2.088,64,2.088,66,2.853,140,2.622,402,3.525,403,3.525,404,3.525,405,4.193,406,5.259,407,4.193]],["title/injectables/PrismaService.html",[74,0.894,140,1.294]],["body/injectables/PrismaService.html",[3,0.292,4,0.292,5,0.253,7,0.508,8,1.61,13,0.029,19,1.046,21,1.128,22,0.973,23,0.828,24,0.838,26,1.495,27,0.44,28,0.717,36,0.292,37,0.093,48,0.02,49,0.02,74,1.291,75,1.646,137,3.362,140,1.868,151,1.246,152,2.58,168,1.733,183,1.521,372,3.125,408,3.015,409,5.334,410,5.334,411,5.334,412,4.755,413,6.074,414,4.755,415,5.68,416,3.586,417,3.015,418,3.586,419,3.586,420,3.586,421,3.586,422,3.586,423,3.586,424,3.586]],["title/classes/Room.html",[37,0.085,234,1.64]],["body/classes/Room.html",[3,0.242,4,0.242,5,0.21,7,0.421,13,0.028,19,1.166,23,0.982,24,1.53,27,0.275,36,0.242,37,0.077,48,0.018,49,0.018,78,1.222,151,1.13,166,1.083,168,1.524,169,3.179,170,2.219,172,3.179,175,3.862,178,3.568,199,2.185,234,2.081,235,3.558,255,4.066,256,3.558,257,4.066,258,4.066,259,4.066,425,5.362,426,2.497,427,4.837,428,4.837,429,2.971,430,2.971,431,2.971,432,2.971,433,2.971,434,2.971,435,2.971,436,2.971,437,2.971,438,2.971,439,2.971,440,2.971,441,2.971,442,2.971]],["title/controllers/RoomController.html",[0,1.2,443,2.164]],["body/controllers/RoomController.html",[0,0.772,2,0.772,3,0.172,4,0.172,5,0.15,7,0.3,8,1.102,12,2.04,13,0.029,17,2.14,19,0.886,21,1.513,22,1.305,23,0.746,24,1.123,26,1.513,27,0.49,28,0.423,29,3.02,30,1.259,31,0.717,36,0.172,37,0.055,38,0.971,39,0.832,40,2.86,46,1.753,48,0.014,49,0.014,78,1.637,90,3.759,91,1.936,96,1.621,100,2.395,103,1.391,125,0.898,151,1.359,162,1.976,170,2.427,183,0.898,186,1.779,187,1.494,188,1.391,193,1.557,194,1.557,195,3.892,196,1.259,197,1.259,198,1.557,203,3.736,206,1.779,234,1.054,252,2.417,264,2.737,289,3.736,294,3.736,303,3.278,396,2.395,443,2.14,444,1.779,445,2.14,446,2.737,447,2.737,448,2.117,449,4.809,450,3.256,451,2.737,452,3.278,453,3.256,454,3.256,455,2.117,456,2.117,457,3.745,458,3.745,459,2.737,460,2.117,461,2.117,462,1.779,463,3.256,464,3.256,465,3.256,466,2.117,467,2.117,468,1.779,469,3.256,470,3.256,471,2.117,472,2.117,473,1.779,474,3.256,475,2.117,476,2.117,477,1.779,478,1.391,479,1.557,480,2.153,481,1.779,482,2.117,483,2.117,484,3.968,485,2.117,486,2.117,487,2.117,488,2.117,489,2.117,490,2.117,491,2.117,492,2.117,493,2.117,494,2.117,495,2.117,496,2.117,497,2.117,498,2.117,499,2.117]],["title/modules/RoomModule.html",[50,1.115,60,1.958]],["body/modules/RoomModule.html",[2,1.764,3,0.3,4,0.3,5,0.26,13,0.029,27,0.566,28,0.736,36,0.3,37,0.095,48,0.021,49,0.021,50,1.638,52,1.562,53,2.053,59,2.596,60,3.842,62,2.409,63,1.834,64,1.834,66,2.625,67,2.878,121,2.421,124,2.421,125,1.562,127,2.421,128,2.421,129,1.69,200,2.808,443,3.552,480,3.32,481,3.096,500,3.096,501,3.683,502,3.096,503,3.683,504,3.683,505,3.096]],["title/injectables/RoomService.html",[74,0.894,480,1.787]],["body/injectables/RoomService.html",[3,0.173,4,0.173,5,0.15,7,0.3,8,1.104,13,0.029,17,1.394,19,0.936,21,1.599,22,1.38,23,0.789,24,1.187,26,1.514,27,0.56,28,0.424,36,0.173,37,0.055,39,1.281,42,2.721,48,0.014,49,0.014,74,0.885,75,0.973,78,1.485,91,1.939,94,1.394,96,1.056,137,3.158,138,1.939,139,1.261,140,1.752,143,2.156,146,1.394,148,2.741,151,1.36,152,1.151,162,1.624,165,2.156,170,1.496,183,0.9,187,1.496,188,2.143,200,2.429,222,2.931,227,2.741,228,1.261,229,1.56,252,2.42,270,1.783,288,1.56,289,1.56,293,1.783,304,2.741,445,2.611,446,2.741,447,2.741,457,3.34,462,1.783,468,1.783,473,1.783,478,1.394,479,1.56,480,1.769,505,1.783,506,1.783,507,2.121,508,2.121,509,2.399,510,2.741,511,2.121,512,2.121,513,2.121,514,2.121,515,2.121,516,2.121,517,1.56,518,1.56,519,2.121,520,1.56,521,2.121,522,1.56,523,1.56,524,3.973,525,1.56,526,1.56,527,1.56,528,1.56,529,1.56,530,1.56,531,2.121,532,2.121,533,2.121,534,2.121,535,2.121,536,2.121,537,4.46,538,3.34,539,2.741,540,2.121,541,3.261,542,3.261,543,1.783,544,2.121,545,2.741,546,1.783,547,2.121,548,1.783,549,1.783,550,2.121,551,2.121,552,2.121,553,2.121,554,3.261,555,1.783,556,1.783,557,2.121,558,1.783,559,2.121,560,2.121,561,1.783,562,2.121,563,2.121]],["title/classes/UpdateRoomDto.html",[37,0.085,564,2.423]],["body/classes/UpdateRoomDto.html",[3,0.384,4,0.384,5,0.334,13,0.028,27,0.523,31,1.598,36,0.384,37,0.122,48,0.024,49,0.024,166,1.721,187,2.166,252,2.561,254,3.472,372,3.102,479,3.472,564,4.16,565,3.968,566,3.968,567,4.72]],["title/classes/UpdateUserDto.html",[37,0.085,568,1.958]],["body/classes/UpdateUserDto.html",[3,0.384,4,0.384,5,0.334,13,0.028,27,0.523,31,1.598,36,0.384,37,0.122,48,0.024,49,0.024,166,1.721,187,2.166,319,2.561,321,3.472,372,3.102,566,3.968,568,3.363,569,3.968,570,3.472,571,4.72]],["title/classes/User.html",[37,0.085,151,0.769]],["body/classes/User.html",[3,0.241,4,0.241,5,0.209,7,0.42,13,0.028,19,1.174,22,1.311,23,0.989,24,1.541,27,0.386,36,0.241,37,0.077,48,0.018,49,0.018,78,1.811,149,2.62,150,2.872,151,0.975,165,2.62,166,1.08,168,1.521,169,3.174,170,2.216,172,3.174,175,3.857,178,3.263,183,1.257,234,2.854,239,3.553,355,4.06,509,3.553,510,4.06,572,2.49,573,4.06,574,4.83,575,2.962,576,2.962,577,2.962,578,2.962,579,2.962,580,2.962,581,2.962,582,2.962,583,2.962,584,2.962,585,2.962,586,2.962,587,2.962,588,2.962]],["title/controllers/UsersController.html",[0,1.2,589,2.164]],["body/controllers/UsersController.html",[0,1.058,2,0.666,3,0.149,4,0.149,5,0.129,7,0.259,8,0.982,12,2.123,13,0.029,19,0.922,21,1.411,22,1.217,23,0.696,24,1.048,26,1.574,27,0.481,28,0.365,29,3.089,30,1.086,31,0.618,36,0.149,37,0.047,38,0.838,39,0.718,40,2.977,46,1.825,48,0.012,49,0.012,78,1.055,90,3.848,94,2.702,96,2.377,100,2.134,101,1.535,102,1.535,103,1.2,110,1.535,125,0.775,151,1.397,162,1.797,170,1.886,187,1.331,193,1.343,194,1.343,195,3.299,196,1.086,197,1.086,198,1.343,203,3.024,219,2.439,294,3.512,303,4.034,319,2.59,327,4.034,396,2.134,399,2.134,400,2.439,452,3.512,458,4.366,459,2.439,477,1.535,478,1.2,568,3.089,570,2.134,589,1.907,590,1.535,591,3.456,592,3.456,593,2.439,594,2.439,595,2.439,596,1.535,597,1.826,598,2.901,599,1.826,600,1.535,601,1.826,602,4.111,603,1.826,604,2.901,605,4.111,606,3.456,607,4.111,608,1.826,609,1.826,610,1.826,611,1.826,612,1.535,613,1.826,614,2.901,615,2.901,616,1.826,617,1.535,618,1.826,619,2.901,620,2.901,621,2.901,622,1.826,623,1.535,624,1.826,625,2.901,626,1.826,627,1.826,628,1.958,629,1.535,630,1.535,631,1.535,632,1.826,633,1.826,634,1.826,635,3.609,636,1.826,637,1.826,638,1.826,639,1.826,640,1.826,641,1.826,642,1.826,643,1.826,644,1.826,645,3.609,646,1.826,647,1.826,648,1.826,649,1.826,650,1.826,651,1.826,652,1.826,653,1.826,654,1.826,655,1.826]],["title/modules/UsersModule.html",[50,1.115,61,1.958]],["body/modules/UsersModule.html",[2,1.817,3,0.314,4,0.314,5,0.272,13,0.029,27,0.56,28,0.77,36,0.314,37,0.1,48,0.021,49,0.021,50,1.687,52,1.634,53,2.114,59,2.627,61,3.799,62,2.481,63,1.918,64,1.918,66,2.703,67,2.963,121,2.532,124,2.532,125,1.634,127,2.532,128,2.532,129,1.768,589,3.63,628,3.361,629,3.239,656,3.239,657,3.239,658,3.852,659,3.852,660,3.852]],["title/injectables/UsersService.html",[74,0.894,628,1.787]],["body/injectables/UsersService.html",[3,0.139,4,0.139,5,0.121,7,0.242,8,0.931,13,0.029,19,0.934,21,1.458,22,1.518,23,0.719,24,1.083,26,1.533,27,0.469,28,0.341,36,0.139,37,0.044,38,0.784,39,0.671,42,2.524,46,1.908,48,0.012,49,0.012,74,0.747,75,0.784,78,1.009,137,3.33,138,1.016,139,1.016,140,1.555,143,1.873,147,1.808,149,1.492,150,2.354,151,1.328,152,2.645,153,1.808,154,2.54,155,2.269,162,1.971,169,1.123,170,2.678,172,1.123,183,0.725,187,1.584,222,3.204,228,1.016,229,1.257,232,2.903,233,3.647,236,4.905,238,3.327,239,1.257,245,2.903,273,2.024,319,2.354,378,2.903,478,1.123,568,3.015,570,2.024,573,1.436,591,3.327,592,3.327,593,2.312,594,2.312,595,2.903,596,2.312,600,2.312,612,2.312,617,2.312,623,2.312,628,1.492,630,1.436,631,1.436,661,1.436,662,1.709,663,1.709,664,1.709,665,1.709,666,1.709,667,1.709,668,1.709,669,1.709,670,1.709,671,1.709,672,1.709,673,1.709,674,2.751,675,2.751,676,2.751,677,2.751,678,3.453,679,2.751,680,2.751,681,1.709,682,1.709,683,1.709,684,1.709,685,2.751,686,2.751,687,2.751,688,1.709,689,2.751,690,1.709,691,1.709,692,2.751,693,1.709,694,1.709,695,1.709,696,3.453,697,1.709,698,1.436,699,1.709,700,2.751,701,2.751,702,2.751,703,1.709,704,1.709]],["title/classes/checkBingoDto.html",[37,0.085,705,2.423]],["body/classes/checkBingoDto.html",[3,0.386,4,0.386,5,0.335,7,0.671,13,0.027,19,0.873,23,0.736,36,0.386,37,0.123,48,0.024,49,0.024,166,1.728,168,2.067,178,3.076,705,4.171,706,3.985,707,6.066,708,4.74]],["title/coverage.html",[709,3.774]],["body/coverage.html",[0,1.858,1,1.589,5,0.171,6,2.032,13,0.029,23,0.375,32,1.311,37,0.153,48,0.015,49,0.015,74,1.503,76,2.032,84,1.589,85,2.032,88,1.437,104,1.311,106,1.437,118,1.437,136,2.032,140,0.95,151,0.565,155,1.589,165,1.311,167,2.032,184,1.589,185,2.032,196,1.437,197,1.437,200,1.109,218,2.032,225,1.778,226,1.778,228,1.437,234,1.204,252,1.311,253,2.032,254,2.649,319,1.311,320,2.032,321,2.649,361,2.032,384,2.032,392,2.032,393,2.032,408,2.032,425,2.032,426,2.032,443,1.589,444,2.032,445,1.589,480,1.311,506,2.032,517,1.778,518,1.778,520,1.778,522,1.778,523,1.778,525,1.778,526,1.778,527,1.778,528,1.778,529,1.778,530,1.778,538,5.636,564,1.778,565,2.032,568,1.437,569,2.032,572,2.032,589,1.589,590,2.032,628,1.311,661,2.032,705,1.778,706,2.032,709,2.032,710,2.417,711,2.417,712,2.417,713,5.097,714,4.302,715,6.337,716,2.417,717,2.417,718,3.6,719,2.417,720,2.417,721,2.417,722,3.617,723,6.203,724,4.285,725,2.032,726,2.032,727,2.032,728,2.032,729,2.032,730,3.617,731,2.032,732,4.767,733,2.032,734,2.417,735,2.417,736,2.032,737,2.032,738,2.417,739,2.417]],["title/dependencies.html",[53,1.679,740,2.314]],["body/dependencies.html",[13,0.029,28,0.816,31,1.382,34,4.348,37,0.134,48,0.022,49,0.022,53,1.732,123,3.004,125,1.732,129,1.874,147,2.684,183,1.732,311,2.684,371,4.772,741,5.676,742,4.083,743,4.083,744,4.083,745,4.083,746,4.083,747,4.083,748,4.083,749,4.083,750,4.083,751,4.083,752,4.083,753,4.083,754,3.433,755,4.083,756,4.083,757,4.083,758,4.083,759,4.083,760,4.083,761,4.083,762,4.083,763,3.433,764,4.083,765,4.083]],["title/miscellaneous/functions.html",[766,1.809,767,3.328]],["body/miscellaneous/functions.html",[7,0.398,13,0.028,21,1.97,22,1.7,23,0.794,24,1.463,26,1.772,48,0.017,49,0.017,78,0.821,151,1.096,164,2.362,178,3.147,225,3.451,226,2.067,228,2.39,234,2.336,256,2.067,445,2.641,509,2.067,517,2.956,518,2.067,520,2.956,522,2.956,523,2.067,525,3.451,526,2.067,527,2.956,528,2.067,529,2.956,530,2.067,539,3.378,543,2.362,545,3.378,546,2.362,548,4.553,549,2.362,555,2.362,556,2.362,561,3.378,722,4.736,724,2.362,725,3.378,726,3.378,727,3.378,728,3.378,729,2.362,730,4.736,731,2.362,736,2.362,737,3.944,766,1.847,767,2.362,768,2.81,769,2.81,770,5.416,771,2.81,772,2.81,773,2.81,774,2.81,775,2.81,776,2.81,777,2.81,778,2.81,779,2.81,780,4.018,781,2.81,782,2.81,783,2.81,784,2.81,785,4.691,786,2.81,787,2.81,788,2.81]],["title/index.html",[7,0.39,789,2.752,790,2.752]],["body/index.html",[13,0.026,17,2.108,18,2.696,48,0.019,49,0.019,83,2.696,91,2.996,94,2.108,96,2.195,129,1.471,143,1.74,147,2.108,287,2.696,288,2.359,399,2.359,417,2.696,451,2.696,452,3.706,558,3.706,606,2.696,698,3.706,754,2.696,763,2.696,791,5.038,792,3.207,793,3.207,794,3.207,795,3.207,796,3.207,797,3.207,798,3.207,799,3.207,800,3.207,801,4.408,802,3.207,803,3.207,804,3.207,805,3.207,806,3.207,807,3.207,808,4.408,809,4.408,810,3.207,811,3.207,812,3.207,813,3.207,814,3.207,815,3.207,816,5.425,817,3.207,818,3.207,819,3.207,820,3.207,821,3.207,822,3.207,823,3.207,824,5.038,825,3.207,826,3.207,827,4.408,828,3.207,829,3.207,830,3.207,831,3.207,832,3.207,833,3.207,834,3.207,835,3.207,836,3.207,837,3.207,838,3.207,839,3.207,840,3.207,841,3.207,842,3.207,843,5.877,844,5.877,845,3.207,846,3.207,847,3.207,848,3.207,849,3.207,850,3.207,851,3.207,852,3.207,853,3.207,854,3.207,855,3.207,856,4.408,857,3.207,858,3.207,859,3.207,860,3.207,861,3.207,862,2.696,863,2.696,864,3.207,865,3.207,866,3.207,867,3.207,868,3.207]],["title/modules.html",[52,1.904]],["body/modules.html",[13,0.024,48,0.024,49,0.024,51,3.011,52,1.943,57,2.724,58,2.724,59,1.943,60,2.724,61,2.724,869,6.47,870,6.47,871,6.47,872,6.47]],["title/overview.html",[873,3.774]],["body/overview.html",[2,1.183,13,0.028,32,2.75,48,0.019,49,0.019,51,4.277,52,1.376,53,1.885,54,2.728,55,2.728,56,2.728,57,3.71,58,3.592,59,2.677,60,3.71,61,3.592,62,2.213,63,1.616,64,1.616,75,1.489,104,2.75,115,2.728,117,2.728,118,3.014,140,2.373,166,1.183,200,2.502,213,2.728,214,2.728,273,2.387,279,2.728,284,2.728,402,2.728,403,2.728,404,2.728,480,2.75,500,2.728,502,2.728,628,2.75,656,2.728,657,2.728,873,2.728,874,3.245]],["title/properties.html",[168,1.443,740,2.314]],["body/properties.html",[13,0.028,48,0.025,49,0.025,168,1.823,314,2.974,862,4.204,863,4.204,875,5.001,876,5.001,877,5.001]],["title/miscellaneous/variables.html",[766,1.809,878,3.328]],["body/miscellaneous/variables.html",[7,0.651,11,3.867,13,0.028,42,2.772,46,1.677,48,0.024,49,0.024,151,1.301,161,3.384,162,2.291,196,3.311,197,2.736,733,4.681,766,3.024,878,3.867,879,4.6,880,4.6,881,4.6,882,4.6,883,4.6,884,4.6,885,4.6,886,4.6]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Card.html":{},"controllers/CardController.html":{},"modules/CardModule.html":{},"injectables/CardService.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/checkBingoDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":538,"title":{},"body":{"injectables/RoomService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":875,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":758,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":751,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":750,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":752,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":715,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":716,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":719,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":713,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":732,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":735,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":718,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":717,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":714,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":720,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":721,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":270,"title":{},"body":{"classes/CreateRoomDto.html":{},"injectables/RoomService.html":{}}}],["1.0.0",{"_index":755,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":273,"title":{},"body":{"classes/CreateRoomDto.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["15",{"_index":271,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["2.0",{"_index":864,"title":{},"body":{"index.html":{}}}],["24h",{"_index":135,"title":{},"body":{"modules/AuthModule.html":{}}}],["3",{"_index":290,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["3.0.2",{"_index":760,"title":{},"body":{"dependencies.html":{}}}],["3.15.2",{"_index":747,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":297,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["4.0.0",{"_index":753,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":765,"title":{},"body":{"dependencies.html":{}}}],["40",{"_index":357,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["40)@isstring()@isnotempty()@apiproperty({description",{"_index":331,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["5",{"_index":279,"title":{},"body":{"classes/CreateRoomDto.html":{},"overview.html":{}}}],["5.0.1",{"_index":748,"title":{},"body":{"dependencies.html":{}}}],["5.2.1",{"_index":746,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":284,"title":{},"body":{"classes/CreateRoomDto.html":{},"overview.html":{}}}],["7",{"_index":874,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":762,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":278,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["8.0.0",{"_index":741,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":743,"title":{},"body":{"dependencies.html":{}}}],["8.2.2",{"_index":744,"title":{},"body":{"dependencies.html":{}}}],["a.wallet",{"_index":690,"title":{},"body":{"injectables/UsersService.html":{}}}],["a.wins",{"_index":694,"title":{},"body":{"injectables/UsersService.html":{}}}],["address",{"_index":387,"title":{},"body":{"classes/LoginDto.html":{}}}],["adquirir",{"_index":296,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["and/or",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{}}}],["api",{"_index":83,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["apibearerauth",{"_index":195,"title":{},"body":{"controllers/CardController.html":{},"controllers/RoomController.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CardController.html":{},"controllers/RoomController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":189,"title":{},"body":{"controllers/CardController.html":{}}}],["apiproperty",{"_index":306,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{}}}],["apiproperty({description",{"_index":394,"title":{},"body":{"classes/LoginResponseDto.html":{}}}],["apitags",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CardController.html":{},"controllers/RoomController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth')@post('/login/register')@apioperation({summary",{"_index":597,"title":{},"body":{"controllers/UsersController.html":{}}}],["apitags('cards",{"_index":202,"title":{},"body":{"controllers/CardController.html":{}}}],["apitags('ranking",{"_index":635,"title":{},"body":{"controllers/UsersController.html":{}}}],["apitags('ranking')@apioperation({summary",{"_index":604,"title":{},"body":{"controllers/UsersController.html":{}}}],["apitags('ranking')@useguards(undefined)@apibearerauth()@get('/ranking/user/:id')@apioperation({summary",{"_index":613,"title":{},"body":{"controllers/UsersController.html":{}}}],["apitags('room",{"_index":482,"title":{},"body":{"controllers/RoomController.html":{}}}],["apitags('status",{"_index":35,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('user",{"_index":645,"title":{},"body":{"controllers/UsersController.html":{}}}],["apitags('user')@useguards(undefined)@apibearerauth()@get('/myaccount')@apioperation({summary",{"_index":618,"title":{},"body":{"controllers/UsersController.html":{}}}],["apitags('user')@useguards(undefined)@apibearerauth()@httpcode(httpstatus.no_content)@delete('/myaccount')@apioperation({summary",{"_index":601,"title":{},"body":{"controllers/UsersController.html":{}}}],["apitags('user')@useguards(undefined)@apibearerauth()@patch('/myaccount')@apioperation({summary",{"_index":624,"title":{},"body":{"controllers/UsersController.html":{}}}],["aplicação",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["app",{"_index":417,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{}}}],["app.close",{"_index":424,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.controller",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":51,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":32,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["após",{"_index":464,"title":{},"body":{"controllers/RoomController.html":{}}}],["aqui",{"_index":809,"title":{},"body":{"index.html":{}}}],["arquivo",{"_index":866,"title":{},"body":{"index.html":{}}}],["async",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RoomService.html":{},"injectables/UsersService.html":{}}}],["autenticado",{"_index":400,"title":{},"body":{"classes/LoginResponseDto.html":{},"controllers/UsersController.html":{}}}],["autenticação",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":120,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":84,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":383,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["authentication",{"_index":390,"title":{},"body":{"classes/LoginDto.html":{}}}],["authguard",{"_index":194,"title":{},"body":{"controllers/CardController.html":{},"controllers/RoomController.html":{},"controllers/UsersController.html":{}}}],["authmodule",{"_index":57,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":877,"title":{},"body":{"properties.html":{}}}],["authservice",{"_index":104,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["autores",{"_index":840,"title":{},"body":{"index.html":{}}}],["await",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RoomService.html":{},"injectables/UsersService.html":{}}}],["awarduser",{"_index":517,"title":{},"body":{"injectables/RoomService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["awarduser(room",{"_index":778,"title":{},"body":{"miscellaneous/functions.html":{}}}],["b",{"_index":689,"title":{},"body":{"injectables/UsersService.html":{}}}],["b.wallet",{"_index":691,"title":{},"body":{"injectables/UsersService.html":{}}}],["b.wins",{"_index":695,"title":{},"body":{"injectables/UsersService.html":{}}}],["backend.herokuapp.com/api/para",{"_index":813,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":670,"title":{},"body":{"injectables/UsersService.html":{}}}],["badrequestexception('as",{"_index":675,"title":{},"body":{"injectables/UsersService.html":{}}}],["banco",{"_index":819,"title":{},"body":{"index.html":{}}}],["baseurl",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["bcrypt",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"index.html":{}}}],["bcrypt.compare(password",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(createuserdto.password",{"_index":684,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash(data.password",{"_index":703,"title":{},"body":{"injectables/UsersService.html":{}}}],["bingar",{"_index":493,"title":{},"body":{"controllers/RoomController.html":{}}}],["bingar'})@get('/room/:id/checkbingo",{"_index":455,"title":{},"body":{"controllers/RoomController.html":{}}}],["bingo",{"_index":558,"title":{},"body":{"injectables/RoomService.html":{},"index.html":{}}}],["blue@123",{"_index":324,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["blueedtech",{"_index":333,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["blueedtech@blue.com",{"_index":328,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["body",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"controllers/RoomController.html":{},"controllers/UsersController.html":{}}}],["bola",{"_index":265,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["bolas",{"_index":283,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["bolasmarcadas",{"_index":707,"title":{},"body":{"classes/checkBingoDto.html":{}}}],["boolean",{"_index":556,"title":{},"body":{"injectables/RoomService.html":{},"miscellaneous/functions.html":{}}}],["bootstrap",{"_index":737,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":872,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":869,"title":{},"body":{"modules.html":{}}}],["caracters",{"_index":348,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["card",{"_index":165,"title":{"classes/Card.html":{}},"body":{"classes/Card.html":{},"controllers/CardController.html":{},"injectables/RoomService.html":{},"classes/User.html":{},"coverage.html":{}}}],["card.controller",{"_index":217,"title":{},"body":{"modules/CardModule.html":{}}}],["card.markings",{"_index":540,"title":{},"body":{"injectables/RoomService.html":{}}}],["card.service",{"_index":201,"title":{},"body":{"controllers/CardController.html":{},"modules/CardModule.html":{}}}],["card.vetor",{"_index":544,"title":{},"body":{"injectables/RoomService.html":{}}}],["card/card.module",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["card/entities/card.entity",{"_index":588,"title":{},"body":{"classes/User.html":{}}}],["cardcontroller",{"_index":184,"title":{"controllers/CardController.html":{}},"body":{"controllers/CardController.html":{},"modules/CardModule.html":{},"coverage.html":{}}}],["cardmodule",{"_index":58,"title":{"modules/CardModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CardModule.html":{},"modules.html":{},"overview.html":{}}}],["cardnumbers",{"_index":543,"title":{},"body":{"injectables/RoomService.html":{},"miscellaneous/functions.html":{}}}],["cards",{"_index":509,"title":{},"body":{"injectables/RoomService.html":{},"classes/User.html":{},"miscellaneous/functions.html":{}}}],["cardservice",{"_index":200,"title":{"injectables/CardService.html":{}},"body":{"controllers/CardController.html":{},"modules/CardModule.html":{},"injectables/CardService.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"coverage.html":{},"overview.html":{}}}],["cartela",{"_index":304,"title":{},"body":{"classes/CreateRoomDto.html":{},"injectables/RoomService.html":{}}}],["cartelas",{"_index":205,"title":{},"body":{"controllers/CardController.html":{},"classes/CreateRoomDto.html":{}}}],["cartelas'})@post",{"_index":191,"title":{},"body":{"controllers/CardController.html":{}}}],["catch(handleerror",{"_index":245,"title":{},"body":{"injectables/CardService.html":{},"injectables/UsersService.html":{}}}],["check",{"_index":725,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["check(mapindex",{"_index":779,"title":{},"body":{"miscellaneous/functions.html":{}}}],["checkbingo",{"_index":445,"title":{},"body":{"controllers/RoomController.html":{},"injectables/RoomService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["checkbingo(@param('id",{"_index":495,"title":{},"body":{"controllers/RoomController.html":{}}}],["checkbingo(id",{"_index":448,"title":{},"body":{"controllers/RoomController.html":{}}}],["checkbingo(mapindex",{"_index":555,"title":{},"body":{"injectables/RoomService.html":{},"miscellaneous/functions.html":{}}}],["checkbingo(user",{"_index":508,"title":{},"body":{"injectables/RoomService.html":{}}}],["checkbingodto",{"_index":705,"title":{"classes/checkBingoDto.html":{}},"body":{"classes/checkBingoDto.html":{},"coverage.html":{}}}],["checkcollumns",{"_index":726,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["checkcollumns(mapindex",{"_index":781,"title":{},"body":{"miscellaneous/functions.html":{}}}],["checkdiagonals",{"_index":727,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["checkdiagonals(mapindex",{"_index":782,"title":{},"body":{"miscellaneous/functions.html":{}}}],["checklines",{"_index":728,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["checklines(mapindex",{"_index":783,"title":{},"body":{"miscellaneous/functions.html":{}}}],["class",{"_index":37,"title":{"classes/Card.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"classes/Room.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/checkBingoDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Card.html":{},"controllers/CardController.html":{},"modules/CardModule.html":{},"injectables/CardService.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/checkBingoDto.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":166,"title":{},"body":{"classes/Card.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"classes/Room.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/checkBingoDto.html":{},"overview.html":{}}}],["clicando",{"_index":808,"title":{},"body":{"index.html":{}}}],["clonar",{"_index":814,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":115,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":116,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":117,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_cardmodule",{"_index":213,"title":{},"body":{"modules/CardModule.html":{},"overview.html":{}}}],["cluster_cardmodule_imports",{"_index":215,"title":{},"body":{"modules/CardModule.html":{}}}],["cluster_cardmodule_providers",{"_index":214,"title":{},"body":{"modules/CardModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":402,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":403,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":404,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_roommodule",{"_index":500,"title":{},"body":{"modules/RoomModule.html":{},"overview.html":{}}}],["cluster_roommodule_imports",{"_index":501,"title":{},"body":{"modules/RoomModule.html":{}}}],["cluster_roommodule_providers",{"_index":502,"title":{},"body":{"modules/RoomModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":656,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":658,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":657,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["com",{"_index":698,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["compare",{"_index":520,"title":{},"body":{"injectables/RoomService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["compare(prizedraw",{"_index":546,"title":{},"body":{"injectables/RoomService.html":{},"miscellaneous/functions.html":{}}}],["competição",{"_index":799,"title":{},"body":{"index.html":{}}}],["compodoc",{"_index":838,"title":{},"body":{"index.html":{}}}],["confirmpassword",{"_index":322,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["connect",{"_index":243,"title":{},"body":{"injectables/CardService.html":{}}}],["conseguiu",{"_index":454,"title":{},"body":{"controllers/RoomController.html":{}}}],["const",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"injectables/RoomService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"injectables/RoomService.html":{},"injectables/UsersService.html":{}}}],["constructor(prisma",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"injectables/RoomService.html":{},"injectables/UsersService.html":{}}}],["constructor(private",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CardController.html":{},"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"controllers/RoomController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CardController.html":{},"controllers/RoomController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CardController.html":{},"controllers/RoomController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('card",{"_index":204,"title":{},"body":{"controllers/CardController.html":{}}}],["controller('room",{"_index":483,"title":{},"body":{"controllers/RoomController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CardController.html":{},"modules/CardModule.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["corretamente",{"_index":547,"title":{},"body":{"injectables/RoomService.html":{}}}],["cors",{"_index":839,"title":{},"body":{"index.html":{}}}],["countusers",{"_index":559,"title":{},"body":{"injectables/RoomService.html":{}}}],["coverage",{"_index":709,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":187,"title":{},"body":{"controllers/CardController.html":{},"injectables/CardService.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":633,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(@loggeduser",{"_index":206,"title":{},"body":{"controllers/CardController.html":{},"controllers/RoomController.html":{}}}],["create(createuserdto",{"_index":596,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(user",{"_index":188,"title":{},"body":{"controllers/CardController.html":{},"injectables/CardService.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{}}}],["createcard",{"_index":225,"title":{},"body":{"injectables/CardService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createdat",{"_index":169,"title":{},"body":{"classes/Card.html":{},"classes/Room.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["createparamdecorator((_",{"_index":882,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createroomdto",{"_index":252,"title":{"classes/CreateRoomDto.html":{}},"body":{"classes/CreateRoomDto.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"classes/UpdateRoomDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":319,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.confirmpassword",{"_index":674,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.email",{"_index":683,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.name",{"_index":682,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.password",{"_index":673,"title":{},"body":{"injectables/UsersService.html":{}}}],["criar",{"_index":459,"title":{},"body":{"controllers/RoomController.html":{},"controllers/UsersController.html":{}}}],["criação",{"_index":190,"title":{},"body":{"controllers/CardController.html":{}}}],["crossmap",{"_index":522,"title":{},"body":{"injectables/RoomService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["crossmap(cardnumbers",{"_index":549,"title":{},"body":{"injectables/RoomService.html":{},"miscellaneous/functions.html":{}}}],["ctx",{"_index":883,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":885,"title":{},"body":{"miscellaneous/variables.html":{}}}],["da",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"index.html":{}}}],["dados",{"_index":399,"title":{},"body":{"classes/LoginResponseDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["daniel",{"_index":845,"title":{},"body":{"index.html":{}}}],["das",{"_index":551,"title":{},"body":{"injectables/RoomService.html":{}}}],["data",{"_index":238,"title":{},"body":{"injectables/CardService.html":{},"injectables/UsersService.html":{}}}],["data.password",{"_index":702,"title":{},"body":{"injectables/UsersService.html":{}}}],["date",{"_index":175,"title":{},"body":{"classes/Card.html":{},"classes/Room.html":{},"classes/User.html":{}}}],["db",{"_index":821,"title":{},"body":{"index.html":{}}}],["de",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CardController.html":{},"classes/CreateRoomDto.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["decorators",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CardController.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"controllers/RoomController.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":880,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":128,"title":{},"body":{"modules/AuthModule.html":{},"modules/CardModule.html":{},"modules/RoomModule.html":{},"modules/UsersModule.html":{}}}],["defined",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Card.html":{},"controllers/CardController.html":{},"injectables/CardService.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/checkBingoDto.html":{}}}],["delete",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["delete('/myaccount",{"_index":653,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('/room/:id/withdrawroom",{"_index":497,"title":{},"body":{"controllers/RoomController.html":{}}}],["delete(':id",{"_index":208,"title":{},"body":{"controllers/CardController.html":{}}}],["delete(@loggeduser",{"_index":654,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(@param('id",{"_index":498,"title":{},"body":{"controllers/RoomController.html":{}}}],["delete(id",{"_index":462,"title":{},"body":{"controllers/RoomController.html":{},"injectables/RoomService.html":{}}}],["delete(user",{"_index":600,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dependencies",{"_index":53,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CardModule.html":{},"modules/PrismaModule.html":{},"modules/RoomModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":807,"title":{},"body":{"index.html":{}}}],["description",{"_index":314,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"properties.html":{}}}],["descrição",{"_index":793,"title":{},"body":{"index.html":{}}}],["deseja",{"_index":295,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["detalhes",{"_index":868,"title":{},"body":{"index.html":{}}}],["dev.vercel.app/loginswagger",{"_index":811,"title":{},"body":{"index.html":{}}}],["development",{"_index":823,"title":{},"body":{"index.html":{}}}],["diego",{"_index":841,"title":{},"body":{"index.html":{}}}],["dinheiro",{"_index":636,"title":{},"body":{"controllers/UsersController.html":{}}}],["dinheiro'})@get('ranking/filterbymoney",{"_index":608,"title":{},"body":{"controllers/UsersController.html":{}}}],["disponível",{"_index":805,"title":{},"body":{"index.html":{}}}],["docs",{"_index":80,"title":{},"body":{"injectables/AppService.html":{}}}],["documentation",{"_index":710,"title":{},"body":{"coverage.html":{}}}],["doesn`t",{"_index":381,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["dos",{"_index":801,"title":{},"body":{"index.html":{}}}],["dto",{"_index":457,"title":{},"body":{"controllers/RoomController.html":{},"injectables/RoomService.html":{}}}],["dto/create",{"_index":478,"title":{},"body":{"controllers/RoomController.html":{},"injectables/RoomService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/login",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/login.dto",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/update",{"_index":630,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["e",{"_index":266,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{}}}],["edita",{"_index":625,"title":{},"body":{"controllers/UsersController.html":{}}}],["elieldo",{"_index":849,"title":{},"body":{"index.html":{}}}],["em",{"_index":268,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["email",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["enableshutdownhooks",{"_index":412,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":414,"title":{},"body":{"injectables/PrismaService.html":{}}}],["encontrado",{"_index":699,"title":{},"body":{"injectables/UsersService.html":{}}}],["entities/user.entity",{"_index":631,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["entity.ts",{"_index":426,"title":{},"body":{"classes/Room.html":{},"coverage.html":{}}}],["entity.ts:10",{"_index":435,"title":{},"body":{"classes/Room.html":{}}}],["entity.ts:11",{"_index":438,"title":{},"body":{"classes/Room.html":{}}}],["entity.ts:13",{"_index":431,"title":{},"body":{"classes/Room.html":{}}}],["entity.ts:14",{"_index":430,"title":{},"body":{"classes/Room.html":{}}}],["entity.ts:15",{"_index":429,"title":{},"body":{"classes/Room.html":{}}}],["entity.ts:16",{"_index":439,"title":{},"body":{"classes/Room.html":{}}}],["entity.ts:4",{"_index":432,"title":{},"body":{"classes/Room.html":{}}}],["entity.ts:5",{"_index":437,"title":{},"body":{"classes/Room.html":{}}}],["entity.ts:6",{"_index":440,"title":{},"body":{"classes/Room.html":{}}}],["entity.ts:7",{"_index":436,"title":{},"body":{"classes/Room.html":{}}}],["entity.ts:8",{"_index":433,"title":{},"body":{"classes/Room.html":{}}}],["entity.ts:9",{"_index":434,"title":{},"body":{"classes/Room.html":{}}}],["entrar",{"_index":800,"title":{},"body":{"index.html":{}}}],["entre",{"_index":263,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["enum",{"_index":442,"title":{},"body":{"classes/Room.html":{}}}],["error",{"_index":785,"title":{},"body":{"miscellaneous/functions.html":{}}}],["especial",{"_index":349,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["est",{"_index":858,"title":{},"body":{"index.html":{}}}],["este",{"_index":857,"title":{},"body":{"index.html":{}}}],["example",{"_index":272,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{}}}],["exclui",{"_index":463,"title":{},"body":{"controllers/RoomController.html":{}}}],["executioncontext",{"_index":884,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exist",{"_index":382,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["expiresin",{"_index":134,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Card.html":{},"controllers/CardController.html":{},"modules/CardModule.html":{},"injectables/CardService.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/checkBingoDto.html":{}}}],["exports",{"_index":406,"title":{},"body":{"modules/PrismaModule.html":{}}}],["express",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"dependencies.html":{}}}],["extends",{"_index":372,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{}}}],["extractjwt",{"_index":369,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":376,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":378,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["felipe",{"_index":854,"title":{},"body":{"index.html":{}}}],["ferramentas",{"_index":831,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Card.html":{},"controllers/CardController.html":{},"modules/CardModule.html":{},"injectables/CardService.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/checkBingoDto.html":{},"coverage.html":{}}}],["filterbymoney",{"_index":591,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["filterbywins",{"_index":592,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findbyid",{"_index":446,"title":{},"body":{"controllers/RoomController.html":{},"injectables/RoomService.html":{}}}],["findbyid(@param('id",{"_index":488,"title":{},"body":{"controllers/RoomController.html":{}}}],["findbyid(id",{"_index":468,"title":{},"body":{"controllers/RoomController.html":{},"injectables/RoomService.html":{}}}],["findone",{"_index":593,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":643,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(id",{"_index":612,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["fraca",{"_index":360,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["fraca'})@isnotempty()@apiproperty({description",{"_index":341,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["freitas",{"_index":842,"title":{},"body":{"index.html":{}}}],["frequency",{"_index":255,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/Room.html":{}}}],["function",{"_index":723,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":767,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["função",{"_index":533,"title":{},"body":{"injectables/RoomService.html":{}}}],["generatecard",{"_index":230,"title":{},"body":{"injectables/CardService.html":{}}}],["gerado",{"_index":395,"title":{},"body":{"classes/LoginResponseDto.html":{}}}],["gerar",{"_index":535,"title":{},"body":{"injectables/RoomService.html":{}}}],["get('/myaccount",{"_index":646,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/ranking/user/:id",{"_index":642,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/room/:id",{"_index":487,"title":{},"body":{"controllers/RoomController.html":{}}}],["get('/room/:id/checkbingo",{"_index":494,"title":{},"body":{"controllers/RoomController.html":{}}}],["get('/room/resetroom",{"_index":490,"title":{},"body":{"controllers/RoomController.html":{}}}],["get('ranking/filterbymoney",{"_index":637,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('ranking/filterbywins",{"_index":640,"title":{},"body":{"controllers/UsersController.html":{}}}],["get()@apioperation({summary",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["getappstatus",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getappstatus(@req",{"_index":41,"title":{},"body":{"controllers/AppController.html":{}}}],["getappstatus(baseurl",{"_index":77,"title":{},"body":{"injectables/AppService.html":{}}}],["getappstatus(req",{"_index":10,"title":{},"body":{"controllers/AppController.html":{}}}],["getting",{"_index":789,"title":{"index.html":{}},"body":{}}],["github",{"_index":843,"title":{},"body":{"index.html":{}}}],["handleerror",{"_index":228,"title":{},"body":{"injectables/CardService.html":{},"injectables/RoomService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["handleerror(error",{"_index":784,"title":{},"body":{"miscellaneous/functions.html":{}}}],["historic",{"_index":427,"title":{},"body":{"classes/Room.html":{}}}],["homepage",{"_index":410,"title":{},"body":{"injectables/PrismaService.html":{}}}],["httpcode",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["httpcode(httpstatus.no_content",{"_index":652,"title":{},"body":{"controllers/UsersController.html":{}}}],["httpcode(httpstatus.ok",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://github.com/lopezjunior/ubc_ploomes_back_endhttps://github.com/lopezjunior/ubc_ploomes_front_endinstalação",{"_index":815,"title":{},"body":{"index.html":{}}}],["https://ploomes",{"_index":810,"title":{},"body":{"index.html":{}}}],["https://ubc",{"_index":812,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["id",{"_index":170,"title":{},"body":{"classes/Card.html":{},"injectables/CardService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id'})@get('/room/:id",{"_index":471,"title":{},"body":{"controllers/RoomController.html":{}}}],["id:string",{"_index":211,"title":{},"body":{"controllers/CardController.html":{}}}],["identifier",{"_index":711,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":377,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["iguais",{"_index":680,"title":{},"body":{"injectables/UsersService.html":{}}}],["implements",{"_index":421,"title":{},"body":{"injectables/PrismaService.html":{}}}],["import",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Card.html":{},"controllers/CardController.html":{},"modules/CardModule.html":{},"injectables/CardService.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CardModule.html":{},"modules/RoomModule.html":{},"modules/UsersModule.html":{}}}],["increment",{"_index":249,"title":{},"body":{"injectables/CardService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Card.html":{},"controllers/CardController.html":{},"injectables/CardService.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/checkBingoDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indexline",{"_index":780,"title":{},"body":{"miscellaneous/functions.html":{}}}],["indices",{"_index":550,"title":{},"body":{"injectables/RoomService.html":{}}}],["inestapplication",{"_index":415,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Card.html":{},"controllers/CardController.html":{},"modules/CardModule.html":{},"injectables/CardService.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/checkBingoDto.html":{}}}],["informadas",{"_index":677,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectable",{"_index":74,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RoomService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RoomService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":75,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/RoomService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["installcriando",{"_index":817,"title":{},"body":{"index.html":{}}}],["invalid",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{}}}],["isemail",{"_index":351,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["ishashvalid",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["isint",{"_index":307,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["isint()@isnumber()@apiproperty({description",{"_index":286,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["isnotempty",{"_index":352,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["isnotempty()@isemail()@apiproperty({description",{"_index":326,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnumber",{"_index":308,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["isnumber()@apiproperty({description",{"_index":299,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["isstring",{"_index":353,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["isstring()@isnotempty()@apiproperty({description",{"_index":389,"title":{},"body":{"classes/LoginDto.html":{}}}],["isstring()@isnotempty()@apiproperty({example",{"_index":323,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@isemail()@apiproperty({description",{"_index":385,"title":{},"body":{"classes/LoginDto.html":{}}}],["jefferson",{"_index":851,"title":{},"body":{"index.html":{}}}],["jogador",{"_index":453,"title":{},"body":{"controllers/RoomController.html":{}}}],["jogadores",{"_index":287,"title":{},"body":{"classes/CreateRoomDto.html":{},"index.html":{}}}],["jogo",{"_index":470,"title":{},"body":{"controllers/RoomController.html":{}}}],["junior",{"_index":848,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":129,"title":{},"body":{"modules/AuthModule.html":{},"modules/CardModule.html":{},"injectables/JwtStrategy.html":{},"classes/LoginResponseDto.html":{},"modules/RoomModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{}}}],["jwt.strategy",{"_index":126,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtfromrequest",{"_index":375,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":122,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":130,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":118,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["ko",{"_index":554,"title":{},"body":{"injectables/RoomService.html":{}}}],["length",{"_index":354,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["length(3",{"_index":330,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letras",{"_index":343,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":862,"title":{},"body":{"index.html":{},"properties.html":{}}}],["license.md",{"_index":867,"title":{},"body":{"index.html":{}}}],["licença",{"_index":856,"title":{},"body":{"index.html":{}}}],["limite",{"_index":276,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["limitprizedraw",{"_index":256,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/Room.html":{},"miscellaneous/functions.html":{}}}],["limitrecord",{"_index":257,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/Room.html":{}}}],["limitusers",{"_index":258,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/Room.html":{}}}],["linkedin",{"_index":844,"title":{},"body":{"index.html":{}}}],["literal",{"_index":365,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["local",{"_index":754,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["localiza",{"_index":469,"title":{},"body":{"controllers/RoomController.html":{}}}],["logado",{"_index":602,"title":{},"body":{"controllers/UsersController.html":{}}}],["loggeduser",{"_index":196,"title":{},"body":{"controllers/CardController.html":{},"controllers/RoomController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginResponseDto.html":{}}}],["login(@body",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(logindto",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logindto",{"_index":88,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["loginresponsedto",{"_index":106,"title":{"classes/LoginResponseDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginResponseDto.html":{},"coverage.html":{}}}],["luiz",{"_index":852,"title":{},"body":{"index.html":{}}}],["mais",{"_index":802,"title":{},"body":{"index.html":{}}}],["maiúsculas",{"_index":344,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["mapindex",{"_index":548,"title":{},"body":{"injectables/RoomService.html":{},"miscellaneous/functions.html":{}}}],["marcados",{"_index":542,"title":{},"body":{"injectables/RoomService.html":{}}}],["marcações",{"_index":552,"title":{},"body":{"injectables/RoomService.html":{}}}],["markednumbers",{"_index":539,"title":{},"body":{"injectables/RoomService.html":{},"miscellaneous/functions.html":{}}}],["markings",{"_index":171,"title":{},"body":{"classes/Card.html":{}}}],["martins",{"_index":850,"title":{},"body":{"index.html":{}}}],["matches",{"_index":355,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":359,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matching",{"_index":49,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Card.html":{},"controllers/CardController.html":{},"modules/CardModule.html":{},"injectables/CardService.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/checkBingoDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["mauricio",{"_index":847,"title":{},"body":{"index.html":{}}}],["max",{"_index":309,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["max(15",{"_index":318,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["max(4",{"_index":313,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["max(6",{"_index":317,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["max(75",{"_index":316,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["maxcards",{"_index":259,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/Room.html":{}}}],["message",{"_index":338,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["metadata",{"_index":757,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CardController.html":{},"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["min",{"_index":310,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["min(1",{"_index":312,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["min(1)@max(15)@isnumber()@apiproperty({description",{"_index":260,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["min(1)@max(4)@isnumber()@apiproperty({description",{"_index":292,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["min(1)@max(6)@isnumber()@apiproperty({description",{"_index":281,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["min(10",{"_index":315,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["min(10)@max(75)@isnumber()@apiproperty({description",{"_index":275,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["minlength",{"_index":356,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(6",{"_index":358,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(6)@isstring()@matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":335,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minúsculas",{"_index":345,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":766,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":827,"title":{},"body":{"index.html":{}}}],["module",{"_index":50,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CardModule.html":{},"modules/PrismaModule.html":{},"modules/RoomModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CardModule.html":{},"modules/PrismaModule.html":{},"modules/RoomModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":52,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CardModule.html":{},"modules/PrismaModule.html":{},"modules/RoomModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["momento",{"_index":621,"title":{},"body":{"controllers/UsersController.html":{}}}],["mozilla",{"_index":860,"title":{},"body":{"index.html":{}}}],["muito",{"_index":340,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["na",{"_index":288,"title":{},"body":{"classes/CreateRoomDto.html":{},"injectables/RoomService.html":{},"index.html":{}}}],["name",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CardController.html":{},"injectables/CardService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["nestjs",{"_index":835,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CardController.html":{},"modules/CardModule.html":{},"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":742,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":123,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":125,"title":{},"body":{"modules/AuthModule.html":{},"controllers/CardController.html":{},"modules/CardModule.html":{},"injectables/JwtStrategy.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":745,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CardController.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"controllers/RoomController.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["nfase",{"_index":798,"title":{},"body":{"index.html":{}}}],["nodejs",{"_index":833,"title":{},"body":{"index.html":{}}}],["nome",{"_index":332,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["notfoundexception",{"_index":671,"title":{},"body":{"injectables/UsersService.html":{}}}],["notfoundexception(`registro",{"_index":697,"title":{},"body":{"injectables/UsersService.html":{}}}],["novo",{"_index":598,"title":{},"body":{"controllers/UsersController.html":{}}}],["npm",{"_index":816,"title":{},"body":{"index.html":{}}}],["npx",{"_index":820,"title":{},"body":{"index.html":{}}}],["number",{"_index":178,"title":{},"body":{"classes/Card.html":{},"classes/CreateRoomDto.html":{},"classes/Room.html":{},"classes/User.html":{},"classes/checkBingoDto.html":{},"miscellaneous/functions.html":{}}}],["numbergenerate",{"_index":536,"title":{},"body":{"injectables/RoomService.html":{}}}],["numeros",{"_index":541,"title":{},"body":{"injectables/RoomService.html":{}}}],["não",{"_index":678,"title":{},"body":{"injectables/UsersService.html":{}}}],["número",{"_index":293,"title":{},"body":{"classes/CreateRoomDto.html":{},"injectables/RoomService.html":{}}}],["números",{"_index":346,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["o",{"_index":452,"title":{},"body":{"controllers/RoomController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["online",{"_index":795,"title":{},"body":{"index.html":{}}}],["onmoduleinit",{"_index":413,"title":{},"body":{"injectables/PrismaService.html":{}}}],["optional",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Card.html":{},"controllers/CardController.html":{},"injectables/CardService.html":{},"classes/CreateRoomDto.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["ou",{"_index":347,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["out",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CardModule.html":{},"modules/PrismaModule.html":{},"modules/RoomModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["outra",{"_index":267,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["overview",{"_index":873,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":740,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pago",{"_index":302,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["para",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CardController.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"index.html":{}}}],["param",{"_index":477,"title":{},"body":{"controllers/RoomController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CardController.html":{},"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["partialtype",{"_index":566,"title":{},"body":{"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createroomdto",{"_index":567,"title":{},"body":{"classes/UpdateRoomDto.html":{}}}],["partialtype(createuserdto",{"_index":571,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["partida",{"_index":484,"title":{},"body":{"controllers/RoomController.html":{}}}],["partida'})@delete('/room/:id/withdrawroom",{"_index":466,"title":{},"body":{"controllers/RoomController.html":{}}}],["partida'})@get('/room/resetroom",{"_index":475,"title":{},"body":{"controllers/RoomController.html":{}}}],["partida'})@post('/room",{"_index":460,"title":{},"body":{"controllers/RoomController.html":{}}}],["passport",{"_index":371,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":124,"title":{},"body":{"modules/AuthModule.html":{},"modules/CardModule.html":{},"modules/RoomModule.html":{},"modules/UsersModule.html":{}}}],["passportmodule.register",{"_index":127,"title":{},"body":{"modules/AuthModule.html":{},"modules/CardModule.html":{},"modules/RoomModule.html":{},"modules/UsersModule.html":{}}}],["passportstrategy",{"_index":368,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":373,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["patch",{"_index":627,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('/myaccount",{"_index":649,"title":{},"body":{"controllers/UsersController.html":{}}}],["payload",{"_index":367,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":380,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pela",{"_index":614,"title":{},"body":{"controllers/UsersController.html":{}}}],["pelo",{"_index":396,"title":{},"body":{"classes/LoginResponseDto.html":{},"controllers/RoomController.html":{},"controllers/UsersController.html":{}}}],["perfil",{"_index":620,"title":{},"body":{"controllers/UsersController.html":{}}}],["por",{"_index":303,"title":{},"body":{"classes/CreateRoomDto.html":{},"controllers/RoomController.html":{},"controllers/UsersController.html":{}}}],["post",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CardController.html":{},"controllers/RoomController.html":{},"controllers/UsersController.html":{}}}],["post('/login",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/login')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/login/register",{"_index":632,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('/room",{"_index":485,"title":{},"body":{"controllers/RoomController.html":{}}}],["postgresql",{"_index":836,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":186,"title":{},"body":{"controllers/CardController.html":{},"controllers/RoomController.html":{}}}],["preço",{"_index":300,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["price",{"_index":235,"title":{},"body":{"injectables/CardService.html":{},"classes/CreateRoomDto.html":{},"classes/Room.html":{}}}],["pricecard",{"_index":231,"title":{},"body":{"injectables/CardService.html":{}}}],["pricecard.room.price",{"_index":241,"title":{},"body":{"injectables/CardService.html":{}}}],["prisma",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"injectables/RoomService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["prisma.cardcreateinput",{"_index":242,"title":{},"body":{"injectables/CardService.html":{}}}],["prisma.service",{"_index":407,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma.usercreateinput",{"_index":681,"title":{},"body":{"injectables/UsersService.html":{}}}],["prisma/client",{"_index":183,"title":{},"body":{"classes/Card.html":{},"injectables/CardService.html":{},"classes/LoginResponseDto.html":{},"injectables/PrismaService.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["prisma/prisma.module",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["prisma/prisma.service",{"_index":672,"title":{},"body":{"injectables/UsersService.html":{}}}],["prismaclient",{"_index":409,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismamodule",{"_index":59,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CardModule.html":{},"modules/PrismaModule.html":{},"modules/RoomModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":140,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/RoomService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RoomService.html":{}}}],["prizedraw",{"_index":525,"title":{},"body":{"injectables/RoomService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["prizedraw(limitprizedraw",{"_index":786,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prizenumbers",{"_index":545,"title":{},"body":{"injectables/RoomService.html":{},"miscellaneous/functions.html":{}}}],["process.env.jwt_secret",{"_index":132,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["production",{"_index":829,"title":{},"body":{"index.html":{}}}],["profile",{"_index":594,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["profile(@loggeduser",{"_index":647,"title":{},"body":{"controllers/UsersController.html":{}}}],["profile(user",{"_index":617,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["projeto",{"_index":791,"title":{},"body":{"index.html":{}}}],["promise",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["properties",{"_index":168,"title":{"properties.html":{}},"body":{"classes/Card.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"classes/User.html":{},"classes/checkBingoDto.html":{},"properties.html":{}}}],["providers",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CardModule.html":{},"modules/PrismaModule.html":{},"modules/RoomModule.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":861,"title":{},"body":{"index.html":{}}}],["punishuser",{"_index":527,"title":{},"body":{"injectables/RoomService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["punishuser(cards",{"_index":787,"title":{},"body":{"miscellaneous/functions.html":{}}}],["pushrodando",{"_index":822,"title":{},"body":{"index.html":{}}}],["que",{"_index":294,"title":{},"body":{"classes/CreateRoomDto.html":{},"controllers/RoomController.html":{},"controllers/UsersController.html":{}}}],["railway",{"_index":837,"title":{},"body":{"index.html":{}}}],["ranking",{"_index":606,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["readonly",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CardController.html":{},"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["realizar",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["recebendo",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["record",{"_index":696,"title":{},"body":{"injectables/UsersService.html":{}}}],["reflect",{"_index":756,"title":{},"body":{"dependencies.html":{}}}],["registro",{"_index":282,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["remove",{"_index":219,"title":{},"body":{"injectables/CardService.html":{},"controllers/UsersController.html":{}}}],["remove(@loggeduser",{"_index":209,"title":{},"body":{"controllers/CardController.html":{}}}],["remove(user",{"_index":223,"title":{},"body":{"injectables/CardService.html":{}}}],["req",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["req.get('host",{"_index":45,"title":{},"body":{"controllers/AppController.html":{}}}],["req.protocol",{"_index":44,"title":{},"body":{"controllers/AppController.html":{}}}],["requer",{"_index":342,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["request",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"miscellaneous/variables.html":{}}}],["request.user",{"_index":886,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reset",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CardModule.html":{},"modules/PrismaModule.html":{},"modules/RoomModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resetar",{"_index":474,"title":{},"body":{"controllers/RoomController.html":{}}}],["resetroom",{"_index":447,"title":{},"body":{"controllers/RoomController.html":{},"injectables/RoomService.html":{}}}],["resetroom(@loggeduser",{"_index":491,"title":{},"body":{"controllers/RoomController.html":{}}}],["resetroom(user",{"_index":473,"title":{},"body":{"controllers/RoomController.html":{},"injectables/RoomService.html":{}}}],["response.dto",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["response.dto.ts",{"_index":393,"title":{},"body":{"classes/LoginResponseDto.html":{},"coverage.html":{}}}],["response.dto.ts:14",{"_index":401,"title":{},"body":{"classes/LoginResponseDto.html":{}}}],["response.dto.ts:9",{"_index":398,"title":{},"body":{"classes/LoginResponseDto.html":{}}}],["responsável",{"_index":458,"title":{},"body":{"controllers/RoomController.html":{},"controllers/UsersController.html":{}}}],["results",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Card.html":{},"controllers/CardController.html":{},"modules/CardModule.html":{},"injectables/CardService.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/checkBingoDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retorna",{"_index":619,"title":{},"body":{"controllers/UsersController.html":{}}}],["return",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CardController.html":{},"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"controllers/RoomController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CardController.html":{},"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["reversalvalue",{"_index":246,"title":{},"body":{"injectables/CardService.html":{}}}],["reversalvalue.price",{"_index":250,"title":{},"body":{"injectables/CardService.html":{}}}],["richest_list",{"_index":686,"title":{},"body":{"injectables/UsersService.html":{}}}],["richest_list.sort((a",{"_index":688,"title":{},"body":{"injectables/UsersService.html":{}}}],["ricos",{"_index":803,"title":{},"body":{"index.html":{}}}],["rimraf",{"_index":759,"title":{},"body":{"dependencies.html":{}}}],["room",{"_index":234,"title":{"classes/Room.html":{}},"body":{"injectables/CardService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["room.controller",{"_index":504,"title":{},"body":{"modules/RoomModule.html":{}}}],["room.dto",{"_index":479,"title":{},"body":{"controllers/RoomController.html":{},"injectables/RoomService.html":{},"classes/UpdateRoomDto.html":{}}}],["room.dto.ts",{"_index":254,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/UpdateRoomDto.html":{},"coverage.html":{}}}],["room.dto.ts:12",{"_index":298,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["room.dto.ts:21",{"_index":280,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["room.dto.ts:30",{"_index":285,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["room.dto.ts:38",{"_index":291,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["room.dto.ts:45",{"_index":305,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["room.dto.ts:55",{"_index":274,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["room.room.id",{"_index":248,"title":{},"body":{"injectables/CardService.html":{}}}],["room.service",{"_index":481,"title":{},"body":{"controllers/RoomController.html":{},"modules/RoomModule.html":{}}}],["room.users",{"_index":563,"title":{},"body":{"injectables/RoomService.html":{}}}],["room.users.length",{"_index":560,"title":{},"body":{"injectables/RoomService.html":{}}}],["room/room.module",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["roomcontroller",{"_index":443,"title":{"controllers/RoomController.html":{}},"body":{"controllers/RoomController.html":{},"modules/RoomModule.html":{},"coverage.html":{}}}],["roomid",{"_index":510,"title":{},"body":{"injectables/RoomService.html":{},"classes/User.html":{}}}],["roomlist",{"_index":531,"title":{},"body":{"injectables/RoomService.html":{}}}],["roommodule",{"_index":60,"title":{"modules/RoomModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RoomModule.html":{},"modules.html":{},"overview.html":{}}}],["roomservice",{"_index":480,"title":{"injectables/RoomService.html":{}},"body":{"controllers/RoomController.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"coverage.html":{},"overview.html":{}}}],["rota",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CardController.html":{},"controllers/RoomController.html":{},"controllers/UsersController.html":{}}}],["rules",{"_index":441,"title":{},"body":{"classes/Room.html":{}}}],["run",{"_index":824,"title":{},"body":{"index.html":{}}}],["running",{"_index":82,"title":{},"body":{"injectables/AppService.html":{}}}],["rxjs",{"_index":761,"title":{},"body":{"dependencies.html":{}}}],["sala",{"_index":289,"title":{},"body":{"classes/CreateRoomDto.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{}}}],["santos",{"_index":855,"title":{},"body":{"index.html":{}}}],["se",{"_index":451,"title":{},"body":{"controllers/RoomController.html":{},"index.html":{}}}],["secret",{"_index":131,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":379,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["segundos",{"_index":269,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["select",{"_index":233,"title":{},"body":{"injectables/CardService.html":{},"injectables/UsersService.html":{}}}],["senha",{"_index":339,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["senhas",{"_index":676,"title":{},"body":{"injectables/UsersService.html":{}}}],["ser",{"_index":301,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["server",{"_index":81,"title":{},"body":{"injectables/AppService.html":{}}}],["signoptions",{"_index":133,"title":{},"body":{"modules/AuthModule.html":{}}}],["silva",{"_index":853,"title":{},"body":{"index.html":{}}}],["sob",{"_index":859,"title":{},"body":{"index.html":{}}}],["sorteio",{"_index":262,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["sorteios",{"_index":277,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Card.html":{},"controllers/CardController.html":{},"modules/CardModule.html":{},"injectables/CardService.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"modules/RoomModule.html":{},"injectables/RoomService.html":{},"classes/UpdateRoomDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/checkBingoDto.html":{}}}],["src/.../award",{"_index":768,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../checkbingo.ts",{"_index":770,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../compare.ts",{"_index":771,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../createcard",{"_index":772,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../crossmap",{"_index":773,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../handleerror.utils.ts",{"_index":774,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../logged",{"_index":879,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":769,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../prizedraw",{"_index":775,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../punishuser",{"_index":776,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../validtransaction",{"_index":777,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:13",{"_index":20,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":76,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":79,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:17",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":119,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:15",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:9",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/login",{"_index":392,"title":{},"body":{"classes/LoginResponseDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":384,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:12",{"_index":388,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:20",{"_index":391,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":361,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:16",{"_index":366,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:7",{"_index":363,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/logged",{"_index":197,"title":{},"body":{"controllers/CardController.html":{},"controllers/RoomController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/card/card.controller.ts",{"_index":185,"title":{},"body":{"controllers/CardController.html":{},"coverage.html":{}}}],["src/card/card.controller.ts:19",{"_index":192,"title":{},"body":{"controllers/CardController.html":{}}}],["src/card/card.module.ts",{"_index":216,"title":{},"body":{"modules/CardModule.html":{}}}],["src/card/card.service",{"_index":505,"title":{},"body":{"modules/RoomModule.html":{},"injectables/RoomService.html":{}}}],["src/card/card.service.ts",{"_index":218,"title":{},"body":{"injectables/CardService.html":{},"coverage.html":{}}}],["src/card/card.service.ts:12",{"_index":221,"title":{},"body":{"injectables/CardService.html":{}}}],["src/card/card.service.ts:52",{"_index":224,"title":{},"body":{"injectables/CardService.html":{}}}],["src/card/card.service.ts:9",{"_index":220,"title":{},"body":{"injectables/CardService.html":{}}}],["src/card/entities/card.entity",{"_index":516,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/card/entities/card.entity.ts",{"_index":167,"title":{},"body":{"classes/Card.html":{},"coverage.html":{}}}],["src/card/entities/card.entity.ts:4",{"_index":177,"title":{},"body":{"classes/Card.html":{}}}],["src/card/entities/card.entity.ts:5",{"_index":182,"title":{},"body":{"classes/Card.html":{}}}],["src/card/entities/card.entity.ts:6",{"_index":179,"title":{},"body":{"classes/Card.html":{}}}],["src/card/entities/card.entity.ts:7",{"_index":181,"title":{},"body":{"classes/Card.html":{}}}],["src/card/entities/card.entity.ts:8",{"_index":176,"title":{},"body":{"classes/Card.html":{}}}],["src/card/entities/card.entity.ts:9",{"_index":180,"title":{},"body":{"classes/Card.html":{}}}],["src/main.ts",{"_index":736,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/prisma/prisma.module",{"_index":121,"title":{},"body":{"modules/AuthModule.html":{},"modules/CardModule.html":{},"modules/RoomModule.html":{},"modules/UsersModule.html":{}}}],["src/prisma/prisma.module.ts",{"_index":405,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"injectables/RoomService.html":{}}}],["src/prisma/prisma.service.ts",{"_index":408,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:12",{"_index":416,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:6",{"_index":419,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:7",{"_index":420,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:8",{"_index":418,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/room/dto/checkbingo.dto.ts",{"_index":706,"title":{},"body":{"classes/checkBingoDto.html":{},"coverage.html":{}}}],["src/room/dto/checkbingo.dto.ts:2",{"_index":708,"title":{},"body":{"classes/checkBingoDto.html":{}}}],["src/room/dto/create",{"_index":253,"title":{},"body":{"classes/CreateRoomDto.html":{},"coverage.html":{}}}],["src/room/dto/update",{"_index":565,"title":{},"body":{"classes/UpdateRoomDto.html":{},"coverage.html":{}}}],["src/room/entities/room",{"_index":425,"title":{},"body":{"classes/Room.html":{},"coverage.html":{}}}],["src/room/room.controller.ts",{"_index":444,"title":{},"body":{"controllers/RoomController.html":{},"coverage.html":{}}}],["src/room/room.controller.ts:30",{"_index":461,"title":{},"body":{"controllers/RoomController.html":{}}}],["src/room/room.controller.ts:40",{"_index":472,"title":{},"body":{"controllers/RoomController.html":{}}}],["src/room/room.controller.ts:50",{"_index":476,"title":{},"body":{"controllers/RoomController.html":{}}}],["src/room/room.controller.ts:60",{"_index":456,"title":{},"body":{"controllers/RoomController.html":{}}}],["src/room/room.controller.ts:70",{"_index":467,"title":{},"body":{"controllers/RoomController.html":{}}}],["src/room/room.module.ts",{"_index":503,"title":{},"body":{"modules/RoomModule.html":{}}}],["src/room/room.service.ts",{"_index":506,"title":{},"body":{"injectables/RoomService.html":{},"coverage.html":{}}}],["src/room/room.service.ts:115",{"_index":511,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/room/room.service.ts:168",{"_index":513,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/room/room.service.ts:17",{"_index":507,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/room/room.service.ts:23",{"_index":512,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/room/room.service.ts:94",{"_index":514,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/room/room.service.ts:98",{"_index":515,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/user/dto/create",{"_index":320,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dto/update",{"_index":569,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/user/entities/user.entity",{"_index":199,"title":{},"body":{"controllers/CardController.html":{},"injectables/CardService.html":{},"classes/Room.html":{}}}],["src/user/entities/user.entity.ts",{"_index":572,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/user/entities/user.entity.ts:10",{"_index":579,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:11",{"_index":586,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:12",{"_index":587,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:13",{"_index":575,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:14",{"_index":582,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:15",{"_index":583,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:16",{"_index":576,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:17",{"_index":584,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:5",{"_index":578,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:6",{"_index":580,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:7",{"_index":577,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:8",{"_index":581,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:9",{"_index":585,"title":{},"body":{"classes/User.html":{}}}],["src/user/users.controller.ts",{"_index":590,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/user/users.controller.ts:28",{"_index":599,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/user/users.controller.ts:37",{"_index":609,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/user/users.controller.ts:46",{"_index":611,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/user/users.controller.ts:57",{"_index":616,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/user/users.controller.ts:68",{"_index":622,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/user/users.controller.ts:77",{"_index":626,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/user/users.controller.ts:89",{"_index":603,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/user/users.module.ts",{"_index":659,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/user/users.service.ts",{"_index":661,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/user/users.service.ts:101",{"_index":669,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/user/users.service.ts:126",{"_index":664,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/user/users.service.ts:15",{"_index":662,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/user/users.service.ts:18",{"_index":663,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/user/users.service.ts:46",{"_index":665,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/user/users.service.ts:62",{"_index":666,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/user/users.service.ts:78",{"_index":667,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/user/users.service.ts:94",{"_index":668,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/utils/award",{"_index":518,"title":{},"body":{"injectables/RoomService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/checkbingo",{"_index":519,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/utils/checkbingo.ts",{"_index":724,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/compare",{"_index":521,"title":{},"body":{"injectables/RoomService.html":{}}}],["src/utils/compare.ts",{"_index":729,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/createcard",{"_index":226,"title":{},"body":{"injectables/CardService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/crossmap",{"_index":523,"title":{},"body":{"injectables/RoomService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/handleerror.utils",{"_index":229,"title":{},"body":{"injectables/CardService.html":{},"injectables/RoomService.html":{},"injectables/UsersService.html":{}}}],["src/utils/handleerror.utils.ts",{"_index":731,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/prizedraw",{"_index":526,"title":{},"body":{"injectables/RoomService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/punishuser",{"_index":528,"title":{},"body":{"injectables/RoomService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/validtransaction",{"_index":530,"title":{},"body":{"injectables/RoomService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["start",{"_index":825,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":828,"title":{},"body":{"index.html":{}}}],["start:prodpriscipais",{"_index":830,"title":{},"body":{"index.html":{}}}],["started",{"_index":790,"title":{"index.html":{}},"body":{}}],["statements",{"_index":712,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":411,"title":{},"body":{"injectables/PrismaService.html":{}}}],["status",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["strategy",{"_index":370,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":78,"title":{},"body":{"injectables/AppService.html":{},"classes/Card.html":{},"injectables/CardService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["summary",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CardController.html":{},"controllers/RoomController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":374,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":870,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":871,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":763,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["são",{"_index":679,"title":{},"body":{"injectables/UsersService.html":{}}}],["tabelas",{"_index":818,"title":{},"body":{"index.html":{}}}],["table",{"_index":739,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":738,"title":{},"body":{"coverage.html":{}}}],["tema",{"_index":796,"title":{},"body":{"index.html":{}}}],["tempo",{"_index":261,"title":{},"body":{"classes/CreateRoomDto.html":{}}}],["teste",{"_index":806,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":422,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":423,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.appservice.getappstatus(baseurl",{"_index":47,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(logindto",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.cardservice.create(user",{"_index":207,"title":{},"body":{"controllers/CardController.html":{}}}],["this.cardservice.remove(user,id",{"_index":212,"title":{},"body":{"controllers/CardController.html":{}}}],["this.jwtservice.sign",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.card",{"_index":244,"title":{},"body":{"injectables/CardService.html":{}}}],["this.prisma.card.delete",{"_index":251,"title":{},"body":{"injectables/CardService.html":{}}}],["this.prisma.room.findmany",{"_index":532,"title":{},"body":{"injectables/RoomService.html":{}}}],["this.prisma.room.findunique",{"_index":247,"title":{},"body":{"injectables/CardService.html":{}}}],["this.prisma.user",{"_index":685,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.delete",{"_index":704,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.findmany",{"_index":687,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.findunique",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["this.prisma.user.update",{"_index":237,"title":{},"body":{"injectables/CardService.html":{}}}],["this.roomservice.checkbingo",{"_index":496,"title":{},"body":{"controllers/RoomController.html":{}}}],["this.roomservice.create(user",{"_index":486,"title":{},"body":{"controllers/RoomController.html":{}}}],["this.roomservice.delete(id",{"_index":499,"title":{},"body":{"controllers/RoomController.html":{}}}],["this.roomservice.findbyid(id",{"_index":489,"title":{},"body":{"controllers/RoomController.html":{}}}],["this.roomservice.resetroom(user",{"_index":492,"title":{},"body":{"controllers/RoomController.html":{}}}],["this.usersservice.create(createuserdto",{"_index":634,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.delete(user",{"_index":655,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.filterbymoney",{"_index":638,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.filterbywins",{"_index":641,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(id",{"_index":644,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.profile(user",{"_index":648,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(user",{"_index":651,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["token",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginResponseDto.html":{}}}],["token_gerado_automaticamente",{"_index":397,"title":{},"body":{"classes/LoginResponseDto.html":{}}}],["totalcards",{"_index":561,"title":{},"body":{"injectables/RoomService.html":{},"miscellaneous/functions.html":{}}}],["transformer",{"_index":749,"title":{},"body":{"dependencies.html":{}}}],["trata",{"_index":794,"title":{},"body":{"index.html":{}}}],["trazer",{"_index":605,"title":{},"body":{"controllers/UsersController.html":{}}}],["true",{"_index":236,"title":{},"body":{"injectables/CardService.html":{},"injectables/UsersService.html":{}}}],["type",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Card.html":{},"controllers/CardController.html":{},"injectables/CardService.html":{},"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/LoginResponseDto.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/checkBingoDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["typescript",{"_index":834,"title":{},"body":{"index.html":{}}}],["término",{"_index":465,"title":{},"body":{"controllers/RoomController.html":{}}}],["ubc",{"_index":792,"title":{},"body":{"index.html":{}}}],["ufc",{"_index":797,"title":{},"body":{"index.html":{}}}],["ui",{"_index":764,"title":{},"body":{"dependencies.html":{}}}],["um",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"injectables/RoomService.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["uma",{"_index":264,"title":{},"body":{"classes/CreateRoomDto.html":{},"controllers/RoomController.html":{}}}],["unauthorizedexception",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["unauthorizedexception('user",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/functions.html":{}}}],["unknown",{"_index":222,"title":{},"body":{"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"injectables/RoomService.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":876,"title":{},"body":{"properties.html":{}}}],["update",{"_index":595,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(@loggeduser",{"_index":650,"title":{},"body":{"controllers/UsersController.html":{}}}],["update(user",{"_index":623,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updatedat",{"_index":172,"title":{},"body":{"classes/Card.html":{},"classes/Room.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["updateroomdto",{"_index":564,"title":{"classes/UpdateRoomDto.html":{}},"body":{"classes/UpdateRoomDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":568,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateuserdto.confirmpassword",{"_index":701,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto.password",{"_index":700,"title":{},"body":{"injectables/UsersService.html":{}}}],["usada",{"_index":534,"title":{},"body":{"injectables/RoomService.html":{}}}],["useguards",{"_index":193,"title":{},"body":{"controllers/CardController.html":{},"controllers/RoomController.html":{},"controllers/UsersController.html":{}}}],["useguards(authguard",{"_index":203,"title":{},"body":{"controllers/CardController.html":{},"controllers/RoomController.html":{},"controllers/UsersController.html":{}}}],["useguards(undefined)@apibearerauth()@apioperation({summary",{"_index":449,"title":{},"body":{"controllers/RoomController.html":{}}}],["user",{"_index":151,"title":{"classes/User.html":{}},"body":{"injectables/AuthService.html":{},"classes/Card.html":{},"controllers/CardController.html":{},"injectables/CardService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginResponseDto.html":{},"injectables/PrismaService.html":{},"classes/Room.html":{},"controllers/RoomController.html":{},"injectables/RoomService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["user.decorator",{"_index":198,"title":{},"body":{"controllers/CardController.html":{},"controllers/RoomController.html":{},"controllers/UsersController.html":{}}}],["user.decorator.ts",{"_index":733,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":570,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":321,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:19",{"_index":334,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:27",{"_index":329,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:39",{"_index":350,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:46",{"_index":325,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.id",{"_index":232,"title":{},"body":{"injectables/CardService.html":{},"injectables/UsersService.html":{}}}],["user.password",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["user.wallet",{"_index":240,"title":{},"body":{"injectables/CardService.html":{}}}],["user/users.module",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["user:user,@param('id",{"_index":210,"title":{},"body":{"controllers/CardController.html":{}}}],["user`s",{"_index":386,"title":{},"body":{"classes/LoginDto.html":{}}}],["userid",{"_index":173,"title":{},"body":{"classes/Card.html":{}}}],["useridlist",{"_index":562,"title":{},"body":{"injectables/RoomService.html":{}}}],["users",{"_index":428,"title":{},"body":{"classes/Room.html":{}}}],["users.controller",{"_index":660,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":629,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["userscontroller",{"_index":589,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":61,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":628,"title":{"injectables/UsersService.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usuário",{"_index":327,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginResponseDto.html":{},"controllers/UsersController.html":{}}}],["usuários",{"_index":607,"title":{},"body":{"controllers/UsersController.html":{}}}],["util",{"_index":524,"title":{},"body":{"injectables/RoomService.html":{}}}],["util.ts",{"_index":730,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["utilizadas",{"_index":832,"title":{},"body":{"index.html":{}}}],["utils",{"_index":227,"title":{},"body":{"injectables/CardService.html":{},"injectables/RoomService.html":{}}}],["utils.ts",{"_index":722,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["valida",{"_index":450,"title":{},"body":{"controllers/RoomController.html":{}}}],["validate",{"_index":362,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":364,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validator",{"_index":311,"title":{},"body":{"classes/CreateRoomDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"dependencies.html":{}}}],["validação",{"_index":557,"title":{},"body":{"injectables/RoomService.html":{}}}],["validtransaction",{"_index":529,"title":{},"body":{"injectables/RoomService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["validtransaction(user",{"_index":788,"title":{},"body":{"miscellaneous/functions.html":{}}}],["value",{"_index":881,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":734,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":878,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["veja",{"_index":865,"title":{},"body":{"index.html":{}}}],["version",{"_index":863,"title":{},"body":{"index.html":{},"properties.html":{}}}],["versão",{"_index":804,"title":{},"body":{"index.html":{}}}],["vetor",{"_index":174,"title":{},"body":{"classes/Card.html":{},"injectables/CardService.html":{}}}],["vinhas",{"_index":846,"title":{},"body":{"index.html":{}}}],["visualizar",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["visualização",{"_index":615,"title":{},"body":{"controllers/UsersController.html":{}}}],["vitórias",{"_index":639,"title":{},"body":{"controllers/UsersController.html":{}}}],["vitórias'})@get('ranking/filterbywins",{"_index":610,"title":{},"body":{"controllers/UsersController.html":{}}}],["válidas",{"_index":553,"title":{},"body":{"injectables/RoomService.html":{}}}],["wallet",{"_index":239,"title":{},"body":{"injectables/CardService.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["watch",{"_index":826,"title":{},"body":{"index.html":{}}}],["winners_list",{"_index":692,"title":{},"body":{"injectables/UsersService.html":{}}}],["winners_list.sort((a",{"_index":693,"title":{},"body":{"injectables/UsersService.html":{}}}],["wins",{"_index":573,"title":{},"body":{"classes/User.html":{},"injectables/UsersService.html":{}}}],["withdraws",{"_index":574,"title":{},"body":{"classes/User.html":{}}}],["x",{"_index":537,"title":{},"body":{"injectables/RoomService.html":{}}}],["z",{"_index":337,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*[a",{"_index":336,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CardModule.html":{},"modules/PrismaModule.html":{},"modules/RoomModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAppStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAppStatus\n                        \n                    \n                \n            \n            \n                \ngetAppStatus(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Visualizar status da aplicação'})\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Req } from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { AppService } from './app.service';\nimport { Request } from 'express';\n\n@ApiTags('Status')\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  @ApiOperation({ summary: 'Visualizar status da aplicação' })\n  getAppStatus(@Req() req: Request) {\n    const baseUrl = req.protocol + '://' + req.get('host');\n    return this.appService.getAppStatus(baseUrl);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCardModule\n\nCardModule\n\nAppModule -->\n\nCardModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nRoomModule\n\nRoomModule\n\nAppModule -->\n\nRoomModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CardModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            RoomModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './auth/auth.module';\nimport { PrismaModule } from './prisma/prisma.module';\nimport { UsersModule } from './User/users.module';\nimport { RoomModule } from './Room/room.module';\nimport { CardModule } from './card/card.module';\n\n@Module({\n  imports: [UsersModule, AuthModule, PrismaModule, RoomModule, CardModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAppStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAppStatus\n                        \n                    \n                \n            \n            \n                \ngetAppStatus(baseUrl: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    baseUrl\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { status: string; docs: string; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getAppStatus(baseUrl: string) {\n    return { status: 'Server is running! 🚀', docs: baseUrl + '/api' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/login')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Rota para Realizar login, recebendo um token de autenticação'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpCode, HttpStatus, Post } from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { AuthService } from './auth.service';\nimport { LoginResponseDto } from './dto/login-response.dto';\nimport { LoginDto } from './dto/login.dto';\n\n@ApiTags('Auth')\n@Controller()\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('/login')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Rota para Realizar login, recebendo um token de autenticação',\n  })\n  login(@Body() loginDto: LoginDto): Promise {\n    return this.authService.login(loginDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtStrategy } from './jwt.strategy';\n\n@Module({\n  imports: [\n    PrismaModule,\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.register({\n      secret: process.env.JWT_SECRET,\n      signOptions: { expiresIn: '24h' },\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(loginDto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { LoginResponseDto } from './dto/login-response.dto';\nimport { LoginDto } from './dto/login.dto';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  async login(loginDto: LoginDto): Promise {\n    const { email, password } = loginDto;\n\n    const user = await this.prisma.user.findUnique({ where: { email } });\n\n    if (!user) {\n      throw new UnauthorizedException('User and/or password is invalid');\n    }\n\n    const isHashValid = await bcrypt.compare(password, user.password);\n    if (!isHashValid) {\n      throw new UnauthorizedException('User and/or password is invalid');\n    }\n\n    delete user.password;\n\n    return {\n      token: this.jwtService.sign({ email }),\n      user: undefined,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Card.html":{"url":"classes/Card.html","title":"class - Card","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Card\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/card/entities/card.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                markings\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                            \n                                userId\n                            \n                            \n                                vetor\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/card/entities/card.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/card/entities/card.entity.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        markings\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                    \n                        \n                                Defined in src/card/entities/card.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/card/entities/card.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                    \n                        \n                                Defined in src/card/entities/card.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        vetor\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                    \n                        \n                                Defined in src/card/entities/card.entity.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '@prisma/client';\n\nexport class Card {\n  id?: string;\n  vetor: number[];\n  markings?: number[];\n  userId: User;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CardController.html":{"url":"controllers/CardController.html","title":"controller - CardController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CardController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/card/card.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                card\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Rota para criação de cartelas'})@Post()\n                \n            \n\n            \n                \n                    Defined in src/card/card.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, UseGuards } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { LoggedUser } from 'src/auth/logged-user.decorator';\nimport { User } from 'src/User/entities/user.entity';\nimport { CardService } from './card.service';\n\n@ApiTags('Cards')\n@UseGuards(AuthGuard())\n@ApiBearerAuth()\n@Controller('card')\nexport class CardController {\n  constructor(private readonly cardService: CardService) {}\n\n  @ApiOperation({\n    summary: 'Rota para criação de cartelas',\n  })\n  @Post()\n  create(@LoggedUser() user: User) {\n    return this.cardService.create(user);\n  }\n\n  //@Delete(':id')\n  //remove(@LoggedUser() user:User,@Param('id') id:string) {\n  //  return this.cardService.remove(user,id);\n  //}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CardModule.html":{"url":"modules/CardModule.html","title":"module - CardModule","body":"\n                   \n\n\n\n\n    Modules\n    CardModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CardModule\n\n\n\ncluster_CardModule_providers\n\n\n\ncluster_CardModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nCardModule\n\nCardModule\n\nCardModule -->\n\nPrismaModule->CardModule\n\n\n\n\n\nCardService\n\nCardService\n\nCardModule -->\n\nCardService->CardModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/card/card.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CardService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CardController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CardService } from './card.service';\nimport { CardController } from './card.controller';\nimport { PassportModule } from '@nestjs/passport';\nimport { PrismaModule } from 'src/prisma/prisma.module';\n\n@Module({\n  imports: [PrismaModule, PassportModule.register({ defaultStrategy: 'jwt' })],\n  controllers: [CardController],\n  providers: [CardService],\n})\nexport class CardModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CardService.html":{"url":"injectables/CardService.html","title":"injectable - CardService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CardService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/card/card.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/card/card.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/card/card.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(user: User, id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/card/card.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { User } from 'src/User/entities/user.entity';\nimport { CreateCard } from 'src/Utils/createCard-utils';\nimport { handleError } from 'src/Utils/handleError.utils';\n\n@Injectable()\nexport class CardService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async create(user: User) {\n    const generateCard = CreateCard();\n\n    const priceCard = await this.prisma.user.findUnique({\n      where: { id: user.id },\n      select: { room: { select: { price: true } } },\n    });\n\n    await this.prisma.user.update({\n      where: { id: user.id },\n      data: {\n        wallet: user.wallet - priceCard.room.price,\n      },\n    });\n\n    const data: Prisma.CardCreateInput = {\n      user: {\n        connect: {\n          id: user.id,\n        },\n      },\n      vetor: generateCard,\n    };\n\n    return this.prisma.card\n      .create({\n        data,\n        select: {\n          user: {\n            select: {\n              name: true,\n            },\n          },\n          id: true,\n          vetor: true,\n        },\n      })\n      .catch(handleError);\n  }\n\n  async remove(user: User, id: string) {\n    const room = await this.prisma.user.findUnique({\n      where: { id: user.id },\n      select: { room: true },\n    });\n\n    const reversalValue = await this.prisma.room.findUnique({\n      where: { id: room.room.id },\n      select: { price: true },\n    });\n\n    await this.prisma.user.update({\n      where: { id: user.id },\n      data: {\n        wallet: {\n          increment: reversalValue.price,\n        },\n      },\n    });\n\n    return this.prisma.card.delete({ where: { id: id } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRoomDto.html":{"url":"classes/CreateRoomDto.html","title":"class - CreateRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Room/dto/create-room.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                frequency\n                            \n                            \n                                limitPrizeDraw\n                            \n                            \n                                    Optional\n                                limitRecord\n                            \n                            \n                                limitUsers\n                            \n                            \n                                maxCards\n                            \n                            \n                                price\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        frequency\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Min(1)@Max(15)@IsNumber()@ApiProperty({description: 'Tempo de sorteio entre uma bola e outra, em segundos (entre 1 e 15)', example: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Room/dto/create-room.dto.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        limitPrizeDraw\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Min(10)@Max(75)@IsNumber()@ApiProperty({description: 'Limite de sorteios (entre 10 e 75)', example: 5})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Room/dto/create-room.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        limitRecord\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Min(1)@Max(6)@IsNumber()@ApiProperty({description: 'Limite de registro de bolas (de 1 a 6)', example: 5})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Room/dto/create-room.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        limitUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsNumber()@ApiProperty({description: 'Limite de jogadores na sala', example: 3})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Room/dto/create-room.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        maxCards\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Min(1)@Max(4)@IsNumber()@ApiProperty({description: 'Número de cartelas que deseja adquirir (entre 1 e 4)', example: 5})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Room/dto/create-room.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({description: 'Preço a ser pago por cartela', example: 10})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Room/dto/create-room.dto.ts:45\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsInt, IsNumber, Max, Min } from 'class-validator';\n\nexport class CreateRoomDto {\n  @Min(1)\n  @Max(4)\n  @IsNumber()\n  @ApiProperty({\n    description: 'Número de cartelas que deseja adquirir (entre 1 e 4)',\n    example: 5,\n  })\n  maxCards: number;\n\n  @Min(10)\n  @Max(75)\n  @IsNumber()\n  @ApiProperty({\n    description: 'Limite de sorteios (entre 10 e 75)',\n    example: 5,\n  })\n  limitPrizeDraw: number;\n\n  @Min(1)\n  @Max(6)\n  @IsNumber()\n  @ApiProperty({\n    description: 'Limite de registro de bolas (de 1 a 6)',\n    example: 5,\n  })\n  limitRecord?: number;\n\n  @IsInt()\n  @IsNumber()\n  @ApiProperty({\n    description: 'Limite de jogadores na sala',\n    example: 3,\n  })\n  limitUsers: number;\n\n  @IsNumber()\n  @ApiProperty({\n    description: 'Preço a ser pago por cartela',\n    example: 10,\n  })\n  price: number;\n\n  @Min(1)\n  @Max(15)\n  @IsNumber()\n  @ApiProperty({\n    description:\n      'Tempo de sorteio entre uma bola e outra, em segundos (entre 1 e 15)',\n    example: 10,\n  })\n  frequency: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/User/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                confirmPassword\n                            \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({example: 'Blue@123'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/User/dto/create-user.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()@ApiProperty({description: 'Email do usuário', example: 'blueedtech@blue.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/User/dto/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Length(3, 40)@IsString()@IsNotEmpty()@ApiProperty({description: 'Nome do usuário', example: 'BlueEdtech'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/User/dto/create-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MinLength(6)@IsString()@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'senha muito fraca'})@IsNotEmpty()@ApiProperty({description: 'Senha do usuário. Requer letras maiúsculas e minúsculas, números ou caracters especial', example: 'Blue@123'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/User/dto/create-user.dto.ts:39\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  Length,\n  Matches,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @Length(3, 40)\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'Nome do usuário',\n    example: 'BlueEdtech',\n  })\n  name: string;\n\n  @IsNotEmpty()\n  @IsEmail()\n  @ApiProperty({\n    description: 'Email do usuário',\n    example: 'blueedtech@blue.com',\n  })\n  email: string;\n\n  @MinLength(6)\n  @IsString()\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {\n    message: 'senha muito fraca',\n  })\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'Senha do usuário. Requer letras maiúsculas e minúsculas, números ou caracters especial',\n    example: 'Blue@123',\n  })\n  password: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({\n    example: 'Blue@123',\n  })\n  confirmPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PrismaService } from 'src/prisma/prisma.service';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly prisma: PrismaService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: process.env.JWT_SECRET,\n    });\n  }\n\n  async validate(payload: { email: string }) {\n    const user = await this.prisma.user.findUnique({\n      where: { email: payload.email },\n    });\n\n    if (!user) {\n      throw new UnauthorizedException(\n        'Either the user doesn`t exist or is not authenticated',\n      );\n    }\n\n    delete user.password;\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsEmail()@ApiProperty({description: 'User`s email address', example: 'blueedtech@blue.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'User`s password for authentication', example: 'Blue@123'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\nexport class LoginDto {\n  @IsString()\n  @IsNotEmpty()\n  @IsEmail()\n  @ApiProperty({\n    description: 'User`s email address',\n    example: 'blueedtech@blue.com',\n  })\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'User`s password for authentication',\n    example: 'Blue@123',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginResponseDto.html":{"url":"classes/LoginResponseDto.html","title":"class - LoginResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                token\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'JWT gerado pelo login', example: 'TOKEN_GERADO_AUTOMATICAMENTE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-response.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Dados do usuário autenticado'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { User } from '@prisma/client';\n\nexport class LoginResponseDto {\n  @ApiProperty({\n    description: 'JWT gerado pelo login',\n    example: 'TOKEN_GERADO_AUTOMATICAMENTE',\n  })\n  token: string;\n\n  @ApiProperty({\n    description: 'Dados do usuário autenticado',\n  })\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                homepage\n                            \n                            \n                                    Static\n                                user\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        homepage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/prisma/prisma.service.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/prisma/prisma.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  homepage: any;\n  static user: any;\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Room.html":{"url":"classes/Room.html","title":"class - Room","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Room\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Room/entities/room-entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                    Optional\n                                frequency\n                            \n                            \n                                    Optional\n                                historic\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                limitPrizeDraw\n                            \n                            \n                                    Optional\n                                limitRecord\n                            \n                            \n                                    Optional\n                                limitUsers\n                            \n                            \n                                    Optional\n                                maxCards\n                            \n                            \n                                number\n                            \n                            \n                                    Optional\n                                price\n                            \n                            \n                                updatedAt\n                            \n                            \n                                    Optional\n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/Room/entities/room-entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        frequency\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/Room/entities/room-entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        historic\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                    \n                        \n                                Defined in src/Room/entities/room-entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/Room/entities/room-entity.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        limitPrizeDraw\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/Room/entities/room-entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        limitRecord\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/Room/entities/room-entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        limitUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/Room/entities/room-entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        maxCards\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/Room/entities/room-entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        number\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/Room/entities/room-entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/Room/entities/room-entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/Room/entities/room-entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                    \n                        \n                                Defined in src/Room/entities/room-entity.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from 'src/User/entities/user.entity';\n\nexport class Room {\n  id?: string;\n  number: number;\n  users?: User[];\n  maxCards?: number;\n  limitPrizeDraw?: number;\n  limitRecord?: number;\n  limitUsers?: number;\n  price?: number;\n  //rules enum\n  historic?: number[];\n  frequency?: number;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RoomController.html":{"url":"controllers/RoomController.html","title":"controller - RoomController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RoomController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Room/room.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                Room\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                CheckBingo\n                            \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                FindById\n                            \n                            \n                                resetRoom\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        CheckBingo\n                        \n                    \n                \n            \n            \n                \nCheckBingo(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'Rota que valida se o jogador conseguiu bingar'})@Get('/room/:id/checkBingo')\n                \n            \n\n            \n                \n                    Defined in src/Room/room.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(user: User, dto: CreateRoomDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'Rota responsável por criar uma sala para a partida'})@Post('/room')\n                \n            \n\n            \n                \n                    Defined in src/Room/room.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateRoomDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'Rota que exclui a sala após o término da partida'})@Delete('/room/:id/withdrawRoom')\n                \n            \n\n            \n                \n                    Defined in src/Room/room.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        FindById\n                        \n                    \n                \n            \n            \n                \nFindById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'Rota que localiza a sala de jogo pelo Id'})@Get('/room/:id')\n                \n            \n\n            \n                \n                    Defined in src/Room/room.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resetRoom\n                        \n                    \n                \n            \n            \n                \nresetRoom(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@ApiBearerAuth()@ApiOperation({summary: 'Rota responsável por resetar a partida'})@Get('/room/resetRoom')\n                \n            \n\n            \n                \n                    Defined in src/Room/room.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { User } from '@prisma/client';\nimport { LoggedUser } from 'src/auth/logged-user.decorator';\nimport { CreateRoomDto } from './dto/create-room.dto';\nimport { RoomService } from './room.service';\n\n@ApiTags('Room')\n@UseGuards(AuthGuard())\n@ApiBearerAuth()\n@Controller('Room')\nexport class RoomController {\n  constructor(private readonly roomService: RoomService) {}\n\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Rota responsável por criar uma sala para a partida',\n  })\n  @Post('/room')\n  create(@LoggedUser() user: User, @Body() dto: CreateRoomDto) {\n    return this.roomService.create(user, dto);\n  }\n\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Rota que localiza a sala de jogo pelo Id',\n  })\n  @Get('/room/:id')\n  FindById(@Param('id') id: string) {\n    return this.roomService.findById(id);\n  }\n\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Rota responsável por resetar a partida',\n  })\n  @Get('/room/resetRoom')\n  resetRoom(@LoggedUser() user: User) {\n    return this.roomService.resetRoom(user);\n  }\n\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Rota que valida se o jogador conseguiu bingar',\n  })\n  @Get('/room/:id/checkBingo')\n  CheckBingo(@Param('id') id: string) {\n    return this.roomService.checkBingo;\n  }\n\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Rota que exclui a sala após o término da partida',\n  })\n  @Delete('/room/:id/withdrawRoom')\n  delete(@Param('id') id: string) {\n    return this.roomService.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RoomModule.html":{"url":"modules/RoomModule.html","title":"module - RoomModule","body":"\n                   \n\n\n\n\n    Modules\n    RoomModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RoomModule\n\n\n\ncluster_RoomModule_imports\n\n\n\ncluster_RoomModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nRoomModule\n\nRoomModule\n\nRoomModule -->\n\nPrismaModule->RoomModule\n\n\n\n\n\nCardService\n\nCardService\n\nRoomModule -->\n\nCardService->RoomModule\n\n\n\n\n\nRoomService\n\nRoomService\n\nRoomModule -->\n\nRoomService->RoomModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/Room/room.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CardService\n                        \n                        \n                            RoomService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RoomController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { RoomService } from './room.service';\nimport { RoomController } from './room.controller';\nimport { PassportModule } from '@nestjs/passport';\nimport { CardService } from 'src/card/card.service';\n\n@Module({\n  imports: [PrismaModule, PassportModule.register({ defaultStrategy: 'jwt' })],\n  controllers: [RoomController],\n  providers: [RoomService, CardService],\n})\nexport class RoomModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RoomService.html":{"url":"injectables/RoomService.html","title":"injectable - RoomService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RoomService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Room/room.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkBingo\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                resetRoom\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, cardService: CardService)\n                    \n                \n                        \n                            \n                                Defined in src/Room/room.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cardService\n                                                  \n                                                        \n                                                                        CardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkBingo\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkBingo(user: User, cards: Card[], roomId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/Room/room.service.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cards\n                                    \n                                                Card[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    roomId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: User, dto: CreateRoomDto)\n                \n            \n\n\n            \n                \n                    Defined in src/Room/room.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateRoomDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/Room/room.service.ts:168\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/Room/room.service.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        resetRoom\n                        \n                    \n                \n            \n            \n                \n                    \n                    resetRoom(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/Room/room.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Prisma, User } from '@prisma/client';\nimport { CardService } from 'src/card/card.service';\nimport { Card } from 'src/card/entities/card.entity';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport { AwardUser } from 'src/Utils/award-utils';\nimport { CheckBingo } from 'src/Utils/checkBingo';\nimport { Compare } from 'src/Utils/compare';\nimport { CrossMap } from 'src/Utils/crossMap-util';\nimport { handleError } from 'src/Utils/handleError.utils';\nimport { PrizeDraw } from 'src/Utils/prizeDraw-util';\nimport { PunishUser } from 'src/Utils/punishUser - util';\nimport { ValidTransaction } from 'src/Utils/validtransaction-utils';\nimport { CreateRoomDto } from './dto/create-room.dto';\n\n@Injectable()\nexport class RoomService {\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly cardService: CardService,\n  ) {}\n\n  async create(user: User, dto: CreateRoomDto) {\n    const roomList = await this.prisma.room.findMany();\n\n    // Função usada para gerar um número para a sala\n    let numberGenerate = 1;\n\n    for (let x = 0; x  {\n      const markedNumbers = card.markings; // Numeros marcados da cartela\n      const cardNumbers = card.vetor;\n\n      const prizeNumbers = Compare(prizeDraw, markedNumbers); // Numeros marcados corretamente\n\n      const mapIndex = CrossMap(cardNumbers, prizeNumbers); // Indices das marcações válidas na cartela\n\n      const KO = CheckBingo(mapIndex); // Boolean de validação do bingo\n\n      if (KO) {\n        const countUsers = room.users.length;\n        let totalCards = 0;\n        const userIdList = room.users;\n\n        for (let x = 0; x \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRoomDto.html":{"url":"classes/UpdateRoomDto.html","title":"class - UpdateRoomDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRoomDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Room/dto/update-room.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateRoomDto } from './create-room.dto';\n\nexport class UpdateRoomDto extends PartialType(CreateRoomDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/User/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/User/entities/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                cards\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                email\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                matches\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                    Optional\n                                room\n                            \n                            \n                                    Optional\n                                roomID\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                            \n                                    Optional\n                                wallet\n                            \n                            \n                                    Optional\n                                wins\n                            \n                            \n                                    Optional\n                                withdraws\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        cards\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Card[]\n\n                    \n                \n                    \n                        \n                                Defined in src/User/entities/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/User/entities/user.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/User/entities/user.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/User/entities/user.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        matches\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/User/entities/user.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/User/entities/user.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/User/entities/user.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        room\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Room\n\n                    \n                \n                    \n                        \n                                Defined in src/User/entities/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        roomID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/User/entities/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/User/entities/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        wallet\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/User/entities/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        wins\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/User/entities/user.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        withdraws\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/User/entities/user.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Room } from '@prisma/client';\nimport { Card } from '../../card/entities/card.entity';\n\nexport class User {\n  id?: string;\n  name: string;\n  email: string;\n  password: string;\n  wallet?: number;\n  matches?: number;\n  wins?: number;\n  withdraws?: number;\n  cards?: Card[];\n  room?: Room;\n  roomID?: string;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/User/users.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                filterByMoney\n                            \n                            \n                                filterByWins\n                            \n                            \n                                findOne\n                            \n                            \n                                profile\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiTags('Auth')@Post('/login/register')@ApiOperation({summary: 'Rota responsável por criar um novo usuário'})\n                \n            \n\n            \n                \n                    Defined in src/User/users.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiTags('User')@UseGuards(undefined)@ApiBearerAuth()@HttpCode(HttpStatus.NO_CONTENT)@Delete('/myAccount')@ApiOperation({summary: 'Rota que remove usuário logado.'})\n                \n            \n\n            \n                \n                    Defined in src/User/users.controller.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filterByMoney\n                        \n                    \n                \n            \n            \n                \nfilterByMoney()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiTags('Ranking')@ApiOperation({summary: 'Rota responsável por trazer o ranking de usuários por dinheiro'})@Get('ranking/filterByMoney')\n                \n            \n\n            \n                \n                    Defined in src/User/users.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filterByWins\n                        \n                    \n                \n            \n            \n                \nfilterByWins()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiTags('Ranking')@ApiOperation({summary: 'Rota responsável por trazer o ranking de usuários por vitórias'})@Get('ranking/filterByWins')\n                \n            \n\n            \n                \n                    Defined in src/User/users.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiTags('Ranking')@UseGuards(undefined)@ApiBearerAuth()@Get('/ranking/user/:id')@ApiOperation({summary: 'Rota responsável pela visualização de um usuário pelo Id.'})\n                \n            \n\n            \n                \n                    Defined in src/User/users.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profile\n                        \n                    \n                \n            \n            \n                \nprofile(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiTags('User')@UseGuards(undefined)@ApiBearerAuth()@Get('/myAccount')@ApiOperation({summary: 'Rota que retorna o perfil do usuário autenticado no momento'})\n                \n            \n\n            \n                \n                    Defined in src/User/users.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(user: User, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiTags('User')@UseGuards(undefined)@ApiBearerAuth()@Patch('/myAccount')@ApiOperation({summary: 'Rota que edita dados do usuário logado'})\n                \n            \n\n            \n                \n                    Defined in src/User/users.controller.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  HttpCode,\n  HttpStatus,\n} from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { AuthGuard } from '@nestjs/passport';\nimport { User } from './entities/user.entity';\nimport { LoggedUser } from 'src/auth/logged-user.decorator';\n\n@Controller()\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @ApiTags('Auth')\n  @Post('/login/register')\n  @ApiOperation({ summary: 'Rota responsável por criar um novo usuário' })\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n\n  @ApiTags('Ranking')\n  @ApiOperation({\n    summary: 'Rota responsável por trazer o ranking de usuários por dinheiro',\n  })\n  @Get('ranking/filterByMoney')\n  filterByMoney() {\n    return this.usersService.filterByMoney();\n  }\n\n  @ApiTags('Ranking')\n  @ApiOperation({\n    summary: 'Rota responsável por trazer o ranking de usuários por vitórias',\n  })\n  @Get('ranking/filterByWins')\n  filterByWins() {\n    return this.usersService.filterByWins();\n  }\n\n  @ApiTags('Ranking')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @Get('/ranking/user/:id')\n  @ApiOperation({\n    summary: 'Rota responsável pela visualização de um usuário pelo Id.',\n  })\n  findOne(@Param('id') id: string) {\n    return this.usersService.findOne(id);\n  }\n\n  @ApiTags('User')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @Get('/myAccount')\n  @ApiOperation({\n    summary: 'Rota que retorna o perfil do usuário autenticado no momento',\n  })\n  profile(@LoggedUser() user: User) {\n    return this.usersService.profile(user);\n  }\n\n  @ApiTags('User')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @Patch('/myAccount')\n  @ApiOperation({ summary: 'Rota que edita dados do usuário logado' })\n  update(@LoggedUser() user: User, @Body() updateUserDto: UpdateUserDto) {\n    return this.usersService.update(user, updateUserDto);\n  }\n\n  @ApiTags('User')\n  @UseGuards(AuthGuard())\n  @ApiBearerAuth()\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @Delete('/myAccount')\n  @ApiOperation({\n    summary: 'Rota que remove usuário logado.',\n  })\n  delete(@LoggedUser() user: User) {\n    return this.usersService.delete(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nPrismaModule->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/User/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { PassportModule } from '@nestjs/passport';\n\n@Module({\n  imports: [PrismaModule, PassportModule.register({ defaultStrategy: 'jwt' })],\n  controllers: [UsersController],\n  providers: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/User/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                filterByMoney\n                            \n                            \n                                    Async\n                                filterByWins\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                profile\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/User/users.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/User/users.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/User/users.service.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        filterByMoney\n                        \n                    \n                \n            \n            \n                \n                    \n                    filterByMoney()\n                \n            \n\n\n            \n                \n                    Defined in src/User/users.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        filterByWins\n                        \n                    \n                \n            \n            \n                \n                    \n                    filterByWins()\n                \n            \n\n\n            \n                \n                    Defined in src/User/users.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/User/users.service.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        profile\n                        \n                    \n                \n            \n            \n                \n                    \n                    profile(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/User/users.service.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(user: User, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/User/users.service.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport { User } from './entities/user.entity';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport * as bcrypt from 'bcrypt';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { handleError } from 'src/Utils/handleError.utils';\n\n@Injectable()\nexport class UsersService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async create(createUserDto: CreateUserDto) {\n    if (createUserDto.password != createUserDto.confirmPassword) {\n      throw new BadRequestException('As senhas informadas não são iguais.');\n    }\n\n    delete createUserDto.confirmPassword;\n\n    const data: Prisma.UserCreateInput = {\n      name: createUserDto.name,\n      email: createUserDto.email,\n      password: await bcrypt.hash(createUserDto.password, 10),\n    };\n\n    return this.prisma.user\n      .create({\n        data,\n        select: {\n          password: false,\n          id: true,\n          name: true,\n          email: true,\n          createdAt: true,\n          updatedAt: true,\n        },\n      })\n      .catch(handleError);\n  }\n\n  async filterByMoney() {\n    const richest_list = await this.prisma.user.findMany({\n      select: {\n        id: true,\n        name: true,\n        wallet: true,\n      },\n    });\n\n    richest_list.sort((a, b) => {\n      return a.wallet - b.wallet;\n    });\n\n    return richest_list;\n  }\n\n  async filterByWins() {\n    const winners_list = await this.prisma.user.findMany({\n      select: {\n        id: true,\n        name: true,\n        wins: true,\n      },\n    });\n\n    winners_list.sort((a, b) => {\n      return a.wins - b.wins;\n    });\n\n    return winners_list;\n  }\n\n  async findOne(id: string) {\n    const record = await this.prisma.user.findUnique({\n      where: { id },\n      select: {\n        id: true,\n        name: true,\n        password: false,\n      },\n    });\n\n    if (!record) {\n      throw new NotFoundException(`Registro com id '${id}' não encontrado.`);\n    }\n    return record;\n  }\n\n  async profile(user: User) {\n    const id = user.id;\n    return await this.prisma.user.findUnique({\n      where: { id },\n    });\n  }\n\n  async update(user: User, updateUserDto: UpdateUserDto) {\n    if (updateUserDto.password) {\n      if (updateUserDto.password != updateUserDto.confirmPassword) {\n        throw new BadRequestException('As senhas informadas não são iguais.');\n      }\n    }\n\n    delete updateUserDto.confirmPassword;\n\n    const data = { ...updateUserDto };\n\n    if (data.password) {\n      data.password = await bcrypt.hash(data.password, 10);\n    }\n    const id = user.id;\n\n    return this.prisma.user\n      .update({\n        where: { id },\n        data,\n        select: { id: true, name: true, password: false },\n      })\n      .catch(handleError);\n  }\n\n  async delete(user: User) {\n    const id = user.id;\n    return await this.prisma.user.delete({ where: { id } }).catch(handleError);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/checkBingoDto.html":{"url":"classes/checkBingoDto.html","title":"class - checkBingoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  checkBingoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Room/dto/checkBingo.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                bolasMarcadas\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        bolasMarcadas\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                    \n                        \n                                Defined in src/Room/dto/checkBingo.dto.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class checkBingoDto {\n  bolasMarcadas: number[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/Room/dto/checkBingo.dto.ts\n            \n            class\n            checkBingoDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/Room/dto/create-room.dto.ts\n            \n            class\n            CreateRoomDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/Room/dto/update-room.dto.ts\n            \n            class\n            UpdateRoomDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/Room/entities/room-entity.ts\n            \n            class\n            Room\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/Room/room.controller.ts\n            \n            controller\n            RoomController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/Room/room.service.ts\n            \n            injectable\n            RoomService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/User/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/User/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/User/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/User/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/User/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/Utils/award-utils.ts\n            \n            function\n            AwardUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/Utils/checkBingo.ts\n            \n            function\n            Check\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/Utils/checkBingo.ts\n            \n            function\n            CheckBingo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/Utils/checkBingo.ts\n            \n            function\n            CheckCollumns\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/Utils/checkBingo.ts\n            \n            function\n            CheckDiagonals\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/Utils/checkBingo.ts\n            \n            function\n            CheckLines\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/Utils/compare.ts\n            \n            function\n            Compare\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/Utils/createCard-utils.ts\n            \n            function\n            CreateCard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/Utils/crossMap-util.ts\n            \n            function\n            CrossMap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/Utils/handleError.utils.ts\n            \n            function\n            handleError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/Utils/prizeDraw-util.ts\n            \n            function\n            PrizeDraw\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/Utils/punishUser - util.ts\n            \n            function\n            PunishUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/Utils/validtransaction-utils.ts\n            \n            function\n            ValidTransaction\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/login-response.dto.ts\n            \n            class\n            LoginResponseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/logged-user.decorator.ts\n            \n            variable\n            LoggedUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/card/card.controller.ts\n            \n            controller\n            CardController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/card/card.service.ts\n            \n            injectable\n            CardService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/card/entities/card.entity.ts\n            \n            class\n            Card\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : 8.0.0\n        \n            @nestjs/core : 8.0.0\n        \n            @nestjs/jwt : 8.0.1\n        \n            @nestjs/passport : 8.2.2\n        \n            @nestjs/platform-express : 8.0.0\n        \n            @nestjs/swagger : 5.2.1\n        \n            @prisma/client : 3.15.2\n        \n            bcrypt : 5.0.1\n        \n            class-transformer : 0.5.1\n        \n            class-validator : 0.13.2\n        \n            passport : 0.6.0\n        \n            passport-jwt : 4.0.0\n        \n            passport-local : 1.0.0\n        \n            reflect-metadata : 0.1.13\n        \n            rimraf : 3.0.2\n        \n            rxjs : 7.2.0\n        \n            swagger-ui-express : 4.4.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AwardUser   (src/.../award-utils.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            Check   (src/.../checkBingo.ts)\n                        \n                        \n                            CheckBingo   (src/.../checkBingo.ts)\n                        \n                        \n                            CheckCollumns   (src/.../checkBingo.ts)\n                        \n                        \n                            CheckDiagonals   (src/.../checkBingo.ts)\n                        \n                        \n                            CheckLines   (src/.../checkBingo.ts)\n                        \n                        \n                            Compare   (src/.../compare.ts)\n                        \n                        \n                            CreateCard   (src/.../createCard-utils.ts)\n                        \n                        \n                            CrossMap   (src/.../crossMap-util.ts)\n                        \n                        \n                            handleError   (src/.../handleError.utils.ts)\n                        \n                        \n                            PrizeDraw   (src/.../prizeDraw-util.ts)\n                        \n                        \n                            PunishUser   (src/.../punishUser - util.ts)\n                        \n                        \n                            ValidTransaction   (src/.../validtransaction-utils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/Utils/award-utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AwardUser\n                        \n                    \n                \n            \n            \n                \nAwardUser(room: Room, totalCards: number)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    room\n                                    \n                                                Room\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    totalCards\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/Utils/checkBingo.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Check\n                        \n                    \n                \n            \n            \n                \nCheck(mapIndex, indexLine)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mapIndex\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    indexLine\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CheckBingo\n                        \n                    \n                \n            \n            \n                \nCheckBingo(mapIndex)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mapIndex\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CheckCollumns\n                        \n                    \n                \n            \n            \n                \nCheckCollumns(mapIndex)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mapIndex\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CheckDiagonals\n                        \n                    \n                \n            \n            \n                \nCheckDiagonals(mapIndex)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mapIndex\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CheckLines\n                        \n                    \n                \n            \n            \n                \nCheckLines(mapIndex)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mapIndex\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/Utils/compare.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Compare\n                        \n                    \n                \n            \n            \n                \nCompare(prizeDraw, markedNumbers)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    prizeDraw\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    markedNumbers\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/Utils/createCard-utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CreateCard\n                        \n                    \n                \n            \n            \n                \nCreateCard()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :     number[]\n\n                    \n                \n            \n        \n    \n    src/Utils/crossMap-util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CrossMap\n                        \n                    \n                \n            \n            \n                \nCrossMap(cardNumbers, prizeNumbers)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cardNumbers\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prizeNumbers\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     number[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/Utils/handleError.utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        handleError\n                        \n                    \n                \n            \n            \n                \nhandleError(error: Error)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/Utils/prizeDraw-util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PrizeDraw\n                        \n                    \n                \n            \n            \n                \nPrizeDraw(limitPrizeDraw: number)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    limitPrizeDraw\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     number[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/Utils/punishUser - util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PunishUser\n                        \n                    \n                \n            \n            \n                \nPunishUser(cards)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cards\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/Utils/validtransaction-utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ValidTransaction\n                        \n                    \n                \n            \n            \n                \nValidTransaction(user: User)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nProjeto API-UBC-Bingo \nDescrição\nSe trata de um bingo online com tema do UFC, com ênfase na competição para entrar\nno ranking dos jogadores mais ricos. Versão disponível para teste!\nDeploy da aplicação clicando aqui\nhttps://ploomes-dev.vercel.app/loginSwagger clicando aqui\nhttps://ubc-backend.herokuapp.com/api/Para clonar o projeto\nhttps://github.com/LopezJunior/ubc_ploomes_back_endhttps://github.com/LopezJunior/ubc_ploomes_front_endInstalação\nnpm installCriando tabelas no banco de dados local\nnpx prisma db pushRodando o app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodPriscipais ferramentas utilizadas\n\nNodeJS\nTypeScript\nNestJS\nPostgreSQL\nSwagger\nrailway\nCompodoc\nCors\nJWT\nBcrypt\n\nAutores\n\nDiego Freitas - Github, Linkedin\nDaniel Vinhas - Github, Linkedin\nMauricio junior - Github, Linkedin\nElieldo Martins - Github, Linkedin\nJefferson Luiz Silva - Github, Linkedin\nFelipe dos Santos - Github, Linkedin\n\nLicença\nEste projeto está sob a licença: Mozilla Public License Version 2.0 - veja o arquivo LICENSE.md para detalhes.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CardModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RoomModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CardModule\n\n\n\ncluster_CardModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_RoomModule\n\n\n\ncluster_RoomModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCardModule\n\nCardModule\n\nAppModule -->\n\nCardModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\nCardModule -->\n\nPrismaModule->CardModule\n\n\n\n\n\nRoomModule\n\nRoomModule\n\nRoomModule -->\n\nPrismaModule->RoomModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nPrismaModule->UsersModule\n\n\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\nAppModule -->\n\nRoomModule->AppModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nCardService\n\nCardService\n\nCardModule -->\n\nCardService->CardModule\n\n\n\nRoomModule -->\n\nCardService->RoomModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nRoomService\n\nRoomService\n\nRoomModule -->\n\nRoomService->RoomModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    10 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            LoggedUser   (src/.../logged-user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/logged-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LoggedUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((_, ctx: ExecutionContext) => {\n  const request = ctx.switchToHttp().getRequest();\n  const user = request.user;\n\n  delete user.password;\n\n  return user;\n})\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
